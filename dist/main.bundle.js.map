{"version":3,"sources":["./src/$_lazy_route_resource lazy","./src/app/app.component.html","./src/app/app.component.scss","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/codedef/task-manager-code.ts","./src/app/component/task/task.component.html","./src/app/component/task/task.component.scss","./src/app/component/task/task.component.ts","./src/app/component/tasklabel/tasklabel.component.html","./src/app/component/tasklabel/tasklabel.component.scss","./src/app/component/tasklabel/tasklabel.component.ts","./src/app/component/taskline/taskline.component.html","./src/app/component/taskline/taskline.component.scss","./src/app/component/taskline/taskline.component.ts","./src/app/component/user/signin/signin.component.html","./src/app/component/user/signin/signin.component.scss","./src/app/component/user/signin/signin.component.ts","./src/app/component/user/signup/signup.component.html","./src/app/component/user/signup/signup.component.scss","./src/app/component/user/signup/signup.component.ts","./src/app/const/app.const.ts","./src/app/const/service-const.ts","./src/app/dto/interface/regist-task-request.ts","./src/app/dto/interface/task-complete-request.dto.ts","./src/app/dto/interface/task-label-register-request.dto.ts","./src/app/dto/interface/user-signin-request.dto.ts","./src/app/dto/interface/user-signup-request.dto.ts","./src/app/dto/task-label-relation.ts","./src/app/entity/task-label.ts","./src/app/entity/task.ts","./src/app/exception/global-error-handler.ts","./src/app/introduction/introduction/introduction.component.html","./src/app/introduction/introduction/introduction.component.scss","./src/app/introduction/introduction/introduction.component.ts","./src/app/routes/web/web-routing.module.ts","./src/app/routes/web/web.module.ts","./src/app/service/common-delivery.service.ts","./src/app/service/signin.service.ts","./src/app/service/signout.service.ts","./src/app/service/signup.service.ts","./src/app/service/task-label.service.ts","./src/app/service/task.service.ts","./src/app/util/collection-util.ts","./src/app/util/date-util.ts","./src/app/util/object.util.ts","./src/app/util/string-util.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;ACVA,42B;;;;;;;ACAA,qCAAqC,8MAA8M,sBAAsB,uBAAuB,eAAe,EAAE,6FAA6F,uBAAuB,uBAAuB,EAAE,yBAAyB,cAAc,eAAe,qBAAqB,EAAE,uBAAuB,0BAA0B,mBAAmB,EAAE,oBAAoB,iBAAiB,EAAE,sBAAsB,iBAAiB,0FAA0F,EAAE,mCAAmC,gCAAgC,uBAAuB,qBAAqB,wKAAwK,EAAE,8MAA8M,uBAAuB,eAAe,EAAE,oFAAoF,qCAAqC,6BAA6B,uCAAuC,uCAAuC,6CAA6C,6CAA6C,gCAAgC,gCAAgC,EAAE,sDAAsD,iBAAiB,oBAAoB,2BAA2B,uBAAuB,gBAAgB,8BAA8B,EAAE,uHAAuH,gBAAgB,iBAAiB,8BAA8B,iBAAiB,gBAAgB,qCAAqC,EAAE,iCAAiC,gCAAgC,sBAAsB,EAAE,wDAAwD,gBAAgB,iBAAiB,8BAA8B,iBAAiB,cAAc,sBAAsB,EAAE,iCAAiC,4BAA4B,iBAAiB,kBAAkB,EAAE,iCAAiC,4BAA4B,sBAAsB,gCAAgC,yBAAyB,EAAE,uCAAuC,gCAAgC,EAAE,2FAA2F,qBAAqB,EAAE,mBAAmB,uBAAuB,EAAE,mBAAmB,uBAAuB,EAAE,UAAU,qBAAqB,EAAE,UAAU,wBAAwB,EAAE,UAAU,sBAAsB,EAAE,uBAAuB,sBAAsB,EAAE,mBAAmB,wBAAwB,EAAE,UAAU,sBAAsB,EAAE,UAAU,wBAAwB,EAAE,uFAAuF,2BAA2B,EAAE,UAAU,uBAAuB,EAAE,G;;;;;;;;;;;;;;;;;;;;;;ACArsG;AACiB;AAClB;AACY;AAErD;;GAEG;AAMH;IAEI;;OAEG;IACH,sBAAoB,cAA8B,EAAU,MAAc;QAAtD,mBAAc,GAAd,cAAc,CAAgB;QAAU,WAAM,GAAN,MAAM,CAAQ;IAAG,CAAC;IAEvE,iCAAU,GAAjB;QACI,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;IAC5C,CAAC;IAED;;OAEG;IACI,8BAAO,GAAd;QACI,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;QAC9B,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,0EAAY,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC;IAjBQ,YAAY;QALxB,wEAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAMsC,gFAAc,EAAkB,+DAAM;OALjE,YAAY,CAkBxB;IAAD,mBAAC;CAAA;AAlBwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbiC;AACjB;AACyB;AACW;AAC6D;AACvF;AAEJ;AACiB;AACW;AACvB;AACC;AACc;AACQ;AAClB;AACiB;AACC;AAClB;AACO;AACL;AACoB;AACH;AACe;AA4C3F;IAAA;IAAyB,CAAC;IAAb,SAAS;QA1CrB,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,oEAAY;gBACZ,qFAAa;gBACb,iGAAe;gBACf,iGAAe;gBACf,qGAAkB;gBAClB,kGAAiB;gBACjB,iHAAqB;aACtB;YACD,OAAO,EAAE;gBACP,gFAAa;gBACb,8EAAgB;gBAChB,yEAAS;gBACT,yFAAgB;gBAChB,mEAAW;gBACX,2EAAmB;gBACnB,qGAAuB;gBACvB,0EAAe;gBACf,yEAAc;gBACd,wEAAa;gBACb,wEAAa;gBACb,6EAAkB;gBAClB,4EAAiB;aAClB;YACD,SAAS,EAAE;gBACT,2EAAW;gBACX,sFAAgB;gBAChB,+EAAa;gBACb,+EAAa;gBACb,iFAAc;gBACd,gGAAqB;gBACrB,yEAAa;gBACb,IAAI;gBACJ,IAAI;gBACJ,gCAAgC;gBAChC,qCAAqC;gBACrC,gBAAgB;gBAChB,IAAI;aACJ;YACF,SAAS,EAAE,CAAC,oEAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;AClEtB;AAAA;;GAEG;AACI,IAAO,eAAe,CA2C5B;AA3CD,WAAc,eAAe;IAE1B,8BAA8B;IAC9B,WAAW;IACX,8BAA8B;IAC7B;;OAEG;IACU,4CAA4B,GAAG,GAAG,CAAC;IAEhD;;OAEG;IACU,6CAA6B,GAAG,GAAG,CAAC;IAEjD;;OAEG;IACU,2CAA2B,GAAG,GAAG,CAAC;IAE/C;;OAEG;IACU,oCAAoB,GAAG,GAAG,CAAC;IAExC;;OAEG;IACU,kCAAkB,GAAG,GAAG,CAAC;IAEtC,8BAA8B;IAC9B,WAAW;IACX,8BAA8B;IAC9B;;OAEG;IACU,mCAAmB,GAAG,GAAG,CAAC;IAEvC;;OAEG;IACU,sCAAsB,GAAG,GAAG,CAAC;AAE9C,CAAC,EA3Ca,eAAe,KAAf,eAAe,QA2C5B;;;;;;;;AC9CD,kuCAAkuC,kBAAkB,0EAA0E,kBAAkB,KAAK,iBAAiB,yEAAyE,kBAAkB,iCAAiC,iBAAiB,kjBAAkjB,+TAA+T,uBAAuB,g1BAAg1B,iBAAiB,gC;;;;;;;ACA5tG,qCAAqC,8MAA8M,sBAAsB,uBAAuB,eAAe,EAAE,6FAA6F,uBAAuB,uBAAuB,EAAE,yBAAyB,cAAc,eAAe,qBAAqB,EAAE,uBAAuB,0BAA0B,mBAAmB,EAAE,oBAAoB,iBAAiB,EAAE,sBAAsB,iBAAiB,0FAA0F,EAAE,mCAAmC,gCAAgC,uBAAuB,qBAAqB,wKAAwK,EAAE,8MAA8M,uBAAuB,eAAe,EAAE,6LAA6L,qCAAqC,6BAA6B,uCAAuC,uCAAuC,6CAA6C,6CAA6C,gCAAgC,gCAAgC,EAAE,wFAAwF,iBAAiB,oBAAoB,2BAA2B,uBAAuB,gBAAgB,8BAA8B,EAAE,uHAAuH,gBAAgB,iBAAiB,8BAA8B,iBAAiB,gBAAgB,qCAAqC,EAAE,iCAAiC,gCAAgC,sBAAsB,EAAE,wDAAwD,gBAAgB,iBAAiB,8BAA8B,iBAAiB,cAAc,sBAAsB,EAAE,iCAAiC,4BAA4B,iBAAiB,kBAAkB,EAAE,iCAAiC,4BAA4B,sBAAsB,gCAAgC,yBAAyB,EAAE,uCAAuC,gCAAgC,EAAE,2FAA2F,qBAAqB,EAAE,mBAAmB,uBAAuB,EAAE,mBAAmB,uBAAuB,EAAE,UAAU,qBAAqB,EAAE,UAAU,wBAAwB,EAAE,UAAU,sBAAsB,EAAE,uBAAuB,sBAAsB,EAAE,mBAAmB,wBAAwB,EAAE,UAAU,sBAAsB,EAAE,UAAU,wBAAwB,EAAE,uFAAuF,2BAA2B,EAAE,UAAU,uBAAuB,EAAE,iGAAiG,yBAAyB,yBAAyB,kBAAkB,EAAE,0IAA0I,wBAAwB,oBAAoB,oBAAoB,sBAAsB,EAAE,qEAAqE,mBAAmB,eAAe,iBAAiB,yBAAyB,yBAAyB,kBAAkB,EAAE,+FAA+F,mBAAmB,eAAe,0BAA0B,sBAAsB,sBAAsB,uBAAuB,EAAE,gFAAgF,kBAAkB,mBAAmB,EAAE,wCAAwC,uCAAuC,EAAE,+GAA+G,mBAAmB,eAAe,EAAE,+BAA+B,qBAAqB,iBAAiB,8BAA8B,sCAAsC,EAAE,mCAAmC,iBAAiB,cAAc,0BAA0B,EAAE,gEAAgE,gBAAgB,iBAAiB,8BAA8B,EAAE,2CAA2C,kBAAkB,mBAAmB,gCAAgC,EAAE,kCAAkC,iBAAiB,oBAAoB,2BAA2B,mBAAmB,EAAE,kCAAkC,iBAAiB,wBAAwB,8BAA8B,oBAAoB,2BAA2B,mBAAmB,uBAAuB,EAAE,mCAAmC,iBAAiB,EAAE,iCAAiC,iBAAiB,oBAAoB,2BAA2B,mBAAmB,EAAE,oDAAoD,gBAAgB,EAAE,G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAn9K;AACO;AAEhB;AACmC;AACS;AACpC;AACG;AACmC;AAExD;AAC+C;AACrC;AACgB;AAET;AAEhD;;GAEG;AAMH;IAEI;;OAEG;IACH,uBAAoB,WAAwB,EAAU,MAAc,EAAU,qBAA4C;QAAtG,gBAAW,GAAX,WAAW,CAAa;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,0BAAqB,GAArB,qBAAqB,CAAuB;QA0B1H;;WAEG;QACI,UAAK,GAAW,EAAE,CAAC;QAE1B;;WAEG;QACI,aAAQ,GAAc,IAAI,iEAAS,CAAC;YACvC,gBAAgB,EAAE,IAAI,mEAAW,CAAC,IAAI,EAAE,CAAC,kEAAU,CAAC,QAAQ,EAAE,kEAAU,CAAC,SAAS,CAAC,kEAAQ,CAAC,qBAAqB,CAAC,CAAC,CAAC;YACpH,gBAAgB,EAAE,IAAI,mEAAW,CAAC,EAAE,CAAC;YACrC,gBAAgB,EAAE,IAAI,mEAAW,CAAC,IAAI,CAAC;YACvC,eAAe,EAAE,IAAI,mEAAW,CAAC,IAAI,CAAC;YACtC,eAAe,EAAE,IAAI,mEAAW,CAAC,EAAE,EAAE,kEAAU,CAAC,SAAS,CAAC,kEAAQ,CAAC,oBAAoB,CAAC,CAAC;SAC5F,CAAC,CAAC;IAxC0H,CAAC;IAO9H;;MAEE;IACF,gCAAQ,GAAR;QAAA,iBAcC;QAbG,2CAA2C;QAC3C,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,SAAS,CAAC,UAAC,MAAc;YACjE,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,wCAAwC;QACxC,IAAI,qEAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YAC3C,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,2EAAY,CAAC,UAAU,GAAG,2EAAY,CAAC,mBAAmB,CAAC,CAAC;SACzF;QAED,mBAAmB;QACnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7B,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAC5B,CAAC;IAuBD;;;MAGE;IACK,kCAAU,GAAjB,UAAkB,MAAc;QAAhC,iBAEC;QADG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,UAAC,GAAyB,IAAK,YAAI,CAAC,qBAAqB,CAAC,SAAS,GAAG,GAAG,CAAC,KAAK,EAAhD,CAAgD,CAAC,CAAC;IAClI,CAAC;IAED;;;;MAIE;IACK,kCAAU,GAAjB;QACI,iCAAiC;QACjC,IAAI,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,EAAE;YAChD,IAAI,oBAAoB,GAAsB,IAAI,6FAAiB,EAAE,CAAC;YACtE,gBAAgB;YAChB,oBAAoB,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC,CAAC;YAC/E,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC,oBAAoB,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC;gBAC9H,CAAC,CAAC,oBAAoB,CAAC,YAAY,CAAC,IAAI,CAAC;YAC7C,kFAAkF;YAClF,IAAI,qEAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC,EAAE;gBAC3E,oBAAoB,CAAC,YAAY,CAAC,kEAAQ,CAAC,sBAAsB,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;aAClF;iBAAM;gBACH,oBAAoB,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC,CAAC;aAClF;YACD,oBAAoB,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC,CAAC;YAC7E,oBAAoB,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC,CAAC;YAC7E,uFAAuF;YACvF,oBAAoB,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAE5C,iBAAiB;YACjB,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC,SAAS,CAAC,UAAC,GAAuB;gBAChF,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;YAEH,8BAA8B;YAC9B,IAAI,OAAO,GAAS,IAAI,0DAAI,EAAE,CAAC;YAC/B,OAAO,CAAC,YAAY,CAAC,oBAAoB,CAAC,YAAY,EAAE,CAAC,CAAC;YAC1D,OAAO,CAAC,YAAY,CAAC,oBAAoB,CAAC,YAAY,EAAE,CAAC,CAAC;YAC1D,OAAO,CAAC,WAAW,CAAC,oBAAoB,CAAC,WAAW,EAAE,CAAC,CAAC;YACxD,OAAO,CAAC,YAAY,CAAC,oBAAoB,CAAC,YAAY,EAAE,CAAC,CAAC;YAC1D,OAAO,CAAC,WAAW,CAAC,oBAAoB,CAAC,WAAW,EAAE,CAAC,CAAC;YACxD,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACtD;IACL,CAAC;IAED;;;OAGG;IACK,iCAAS,GAAjB;QACI,IAAG,qEAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC,EAAC;YACzE,IAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,4BAA4B,CAAC;YAC3D,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACI,0CAAkB,GAAzB;QACI,mBAAmB;QACnB,IAAI,SAAS,GAAoB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACvE,IAAI,qEAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC,IAAI,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI,SAAS,CAAC,OAAO,CAAC,EAAE;YACvJ,IAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,4BAA4B,CAAC;YAC3D,OAAO,IAAI,CAAC;SACf;QAED,IAAI,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI,SAAS,CAAC,OAAO,CAAC,EAAE;YAC3E,IAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,0BAA0B,CAAC;YACzD,OAAO,IAAI,CAAC;SACf;QAED,4BAA4B;QAC5B,IAAI,IAAI,GAAoB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACjE,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE;YAC5D,IAAI,CAAC,aAAa,GAAI,kEAAQ,CAAC,yBAAyB,CAAC;YACzD,OAAO,IAAI,CAAC;SACf;QAED,2BAA2B;QAC3B,IAAI,QAAQ,GAAW,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC;QAClE,IAAI,SAAS,GAAW,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC;QACpE,IAAG,CAAC,qEAAU,CAAC,iBAAiB,CAAC,QAAQ,CAAC,IAAI,kEAAQ,CAAC,uBAAuB,CAAC,QAAQ,EAAE,SAAS,CAAC,EAAE;YACjG,IAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,8BAA8B,CAAC;YAC7D,OAAO,IAAI,CAAC;SACf;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAED;;;;OAIG;IACI,gCAAQ,GAAf,UAAgB,MAAc;QAA9B,iBAgBC;QAfG,eAAe;QACf,IAAI,sBAAsB,GAA2B,IAAI,wGAAsB,EAAE,CAAC;QAClF,sBAAsB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAEzC,wCAAwC;QACxC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC,SAAS,CAAC,UAAC,GAA4B;YACrF,IAAI,CAAC,qEAAU,CAAC,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBACzC,aAAa;gBACb,IAAI,aAAa,GAAS,6CAAC,CAAC,KAAK,CAAC,KAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,EAAC,MAAM,EAAG,GAAG,CAAC,MAAM,EAAC,CAAC,CAAC;gBAC/F,mBAAmB;gBACnB,IAAI,KAAK,GAAW,6CAAC,CAAC,OAAO,CAAC,KAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;gBACnF,cAAc;gBACd,KAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;aAC3D;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAxKQ,aAAa;QALzB,wEAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAMmC,0EAAW,EAAkB,gEAAM,EAAiC,+FAAqB;OALjH,aAAa,CA0KzB;IAAD,oBAAC;CAAA;AA1KyB;;;;;;;;ACzB1B,oZAAoZ,uBAAuB,+eAA+e,sBAAsB,4D;;;;;;;ACAh7B,qCAAqC,8OAA8O,sBAAsB,uBAAuB,eAAe,EAAE,6FAA6F,uBAAuB,uBAAuB,EAAE,yBAAyB,cAAc,eAAe,qBAAqB,EAAE,uBAAuB,0BAA0B,mBAAmB,EAAE,oBAAoB,iBAAiB,EAAE,sBAAsB,iBAAiB,0FAA0F,EAAE,mCAAmC,gCAAgC,uBAAuB,qBAAqB,wKAAwK,EAAE,8OAA8O,uBAAuB,eAAe,EAAE,oFAAoF,qCAAqC,6BAA6B,uCAAuC,uCAAuC,6CAA6C,6CAA6C,gCAAgC,gCAAgC,EAAE,sGAAsG,iBAAiB,oBAAoB,2BAA2B,uBAAuB,gBAAgB,8BAA8B,EAAE,uHAAuH,gBAAgB,iBAAiB,8BAA8B,iBAAiB,gBAAgB,qCAAqC,EAAE,iCAAiC,gCAAgC,sBAAsB,EAAE,wDAAwD,gBAAgB,iBAAiB,8BAA8B,iBAAiB,cAAc,sBAAsB,EAAE,iCAAiC,4BAA4B,iBAAiB,kBAAkB,EAAE,iCAAiC,4BAA4B,sBAAsB,gCAAgC,yBAAyB,EAAE,uCAAuC,gCAAgC,EAAE,2FAA2F,qBAAqB,EAAE,mEAAmE,uBAAuB,EAAE,mBAAmB,uBAAuB,EAAE,UAAU,qBAAqB,EAAE,UAAU,wBAAwB,EAAE,UAAU,sBAAsB,EAAE,uBAAuB,sBAAsB,EAAE,0DAA0D,wBAAwB,EAAE,UAAU,sBAAsB,EAAE,UAAU,wBAAwB,EAAE,uFAAuF,2BAA2B,EAAE,UAAU,uBAAuB,EAAE,yGAAyG,iBAAiB,kBAAkB,8BAA8B,uBAAuB,EAAE,yCAAyC,oBAAoB,iBAAiB,qBAAqB,qBAAqB,EAAE,4CAA4C,qBAAqB,sBAAsB,yBAAyB,EAAE,+CAA+C,gCAAgC,EAAE,2DAA2D,wBAAwB,gBAAgB,uBAAuB,EAAE,iDAAiD,mBAAmB,mBAAmB,sBAAsB,6BAA6B,4BAA4B,yBAAyB,qBAAqB,gCAAgC,EAAE,kDAAkD,mBAAmB,EAAE,gB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA7zI;AAC4B;AACV;AAChB;AACiC;AACpC;AACiD;AAChC;AAGnC;AAE0B;AAEL;AAEpD;;GAEG;AAMH;IAEI;;OAEG;IACH,4BAAoB,qBAA4C,EAAU,gBAAkC,EAAU,WAAwB;QAA1H,0BAAqB,GAArB,qBAAqB,CAAuB;QAAU,qBAAgB,GAAhB,gBAAgB,CAAkB;QAAU,gBAAW,GAAX,WAAW,CAAa;QAO9I;;WAEG;QACI,uBAAkB,GAAW,IAAI,CAAC;QAEzC;;WAEG;QACI,WAAM,GAAgB,EAAE,CAAC;QAEhC;;WAEG;QACI,UAAK,GAAW,EAAE,CAAC;QAe1B;;WAEG;QACI,kBAAa,GAAc,IAAI,iEAAS,CAAC;YAC5C,gBAAgB,EAAE,IAAI,mEAAW,CAAC,IAAI,EAAE,CAAC,kEAAU,CAAC,QAAQ,EAAE,kEAAU,CAAC,SAAS,CAAC,kEAAQ,CAAC,qBAAqB,CAAC,CAAC,CAAC;SACvH,CAAC,CAAC;IAxC+I,CAAC;IAsBnJ,qCAAQ,GAAR;QAAA,iBAWC;QAVG,kBAAkB;QAClB,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,SAAS,CAAC,UAAC,MAAc;YACnE,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,sBAAsB;QACtB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAE9B,mBAAmB;QACnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IASD;;;OAGG;IACI,wCAAW,GAAlB,UAAmB,MAAc;QAAjC,iBAKC;QAJG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,UAAC,GAA8B;YACzE,yBAAyB;YACzB,KAAI,CAAC,qBAAqB,CAAC,UAAU,GAAG,GAAG,CAAC,MAAM,CAAC;QACvD,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACI,uCAAU,GAAjB,UAAkB,MAAc;QAAhC,iBAEC;QADG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,UAAC,GAAyB,IAAK,YAAI,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,EAAtB,CAAsB,CAAC,CAAC;IACxG,CAAC;IAED;;OAEG;IACI,0CAAa,GAApB;QAAA,iBAgBC;QAfG,kBAAkB;QAClB,IAAI,GAAG,GAAgC,IAAI,mHAA2B,EAAE,CAAC;QACzE,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC;QACjE,GAAG,CAAC,QAAQ,GAAG,mFAAe,CAAC,oBAAoB,CAAC;QACpD,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAEzB,qBAAqB;QACrB,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,UAAC,GAAiC;YACjF,IAAI,KAAK,GAAc,IAAI,qEAAS,EAAE,CAAC;YACvC,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;YAC5B,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC;YAChC,KAAK,CAAC,QAAQ,GAAG,mFAAe,CAAC,oBAAoB,CAAC;YACtD,KAAK,CAAC,MAAM,GAAG,KAAI,CAAC,MAAM,CAAC;YAC3B,KAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACI,+CAAkB,GAAzB;QACI,wCAAwC;QACxC,IAAI,KAAK,GAAoB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxE,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;YAC9D,IAAI,CAAC,kBAAkB,GAAI,kEAAQ,CAAC,4BAA4B,CAAC;YACjE,OAAO,IAAI,CAAC;SACf;aAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;YACtE,IAAI,CAAC,kBAAkB,GAAI,kEAAQ,CAAC,0BAA0B,CAAC;YAC/D,OAAO,IAAI,CAAC;SACf;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAED;;OAEG;IACI,wCAAW,GAAlB,UAAmB,KAAK,EAAE,SAA2B;QACjD,sBAAsB;QACtB,IAAG,sEAAU,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE;YACxC,IAAI,CAAC,qBAAqB,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;SACrD;aAAM;YACH,gCAAgC;YAChC,IAAI,CAAC,qBAAqB,CAAC,SAAS,GAAG,6CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,UAAC,IAAU,IAAK,WAAI,CAAC,SAAS,KAAK,SAAS,CAAC,SAAS,EAAtC,CAAsC,CAAC,CAAC;SACvH;IAEL,CAAC;IArHQ,kBAAkB;QAL9B,wEAAS,CAAC;YACT,QAAQ,EAAE,eAAe;;;SAG1B,CAAC;yCAM6C,+FAAqB,EAA4B,qFAAgB,EAAuB,0EAAW;OALrI,kBAAkB,CAuH9B;IAAD,yBAAC;CAAA;AAvH8B;;;;;;;;ACxB/B,g9BAAg9B,sBAAsB,8VAA8V,kBAAkB,iJ;;;;;;;ACAt1C,qCAAqC,8MAA8M,sBAAsB,uBAAuB,eAAe,EAAE,6FAA6F,uBAAuB,uBAAuB,EAAE,yBAAyB,cAAc,eAAe,qBAAqB,EAAE,uBAAuB,0BAA0B,mBAAmB,EAAE,oBAAoB,iBAAiB,EAAE,sBAAsB,iBAAiB,0FAA0F,EAAE,mCAAmC,gCAAgC,uBAAuB,qBAAqB,wKAAwK,EAAE,8MAA8M,uBAAuB,eAAe,EAAE,6LAA6L,qCAAqC,6BAA6B,uCAAuC,uCAAuC,6CAA6C,6CAA6C,gCAAgC,gCAAgC,EAAE,wFAAwF,iBAAiB,oBAAoB,2BAA2B,uBAAuB,gBAAgB,8BAA8B,EAAE,uHAAuH,gBAAgB,iBAAiB,8BAA8B,iBAAiB,gBAAgB,qCAAqC,EAAE,iCAAiC,gCAAgC,sBAAsB,EAAE,wDAAwD,gBAAgB,iBAAiB,8BAA8B,iBAAiB,cAAc,sBAAsB,EAAE,iCAAiC,4BAA4B,iBAAiB,kBAAkB,EAAE,iCAAiC,4BAA4B,sBAAsB,gCAAgC,yBAAyB,EAAE,uCAAuC,gCAAgC,EAAE,2FAA2F,qBAAqB,EAAE,mBAAmB,uBAAuB,EAAE,mBAAmB,uBAAuB,EAAE,UAAU,qBAAqB,EAAE,UAAU,wBAAwB,EAAE,UAAU,sBAAsB,EAAE,uBAAuB,sBAAsB,EAAE,mBAAmB,wBAAwB,EAAE,UAAU,sBAAsB,EAAE,UAAU,wBAAwB,EAAE,uFAAuF,2BAA2B,EAAE,UAAU,uBAAuB,EAAE,8MAA8M,sBAAsB,uBAAuB,eAAe,EAAE,6FAA6F,uBAAuB,uBAAuB,EAAE,yBAAyB,cAAc,eAAe,qBAAqB,EAAE,uBAAuB,0BAA0B,mBAAmB,EAAE,oBAAoB,iBAAiB,EAAE,sBAAsB,iBAAiB,0FAA0F,EAAE,mCAAmC,gCAAgC,uBAAuB,qBAAqB,wKAAwK,EAAE,8MAA8M,uBAAuB,eAAe,EAAE,6LAA6L,qCAAqC,6BAA6B,uCAAuC,uCAAuC,6CAA6C,6CAA6C,gCAAgC,gCAAgC,EAAE,wFAAwF,iBAAiB,oBAAoB,2BAA2B,uBAAuB,gBAAgB,8BAA8B,EAAE,uHAAuH,gBAAgB,iBAAiB,8BAA8B,iBAAiB,gBAAgB,qCAAqC,EAAE,iCAAiC,gCAAgC,sBAAsB,EAAE,wDAAwD,gBAAgB,iBAAiB,8BAA8B,iBAAiB,cAAc,sBAAsB,EAAE,iCAAiC,4BAA4B,iBAAiB,kBAAkB,EAAE,iCAAiC,4BAA4B,sBAAsB,gCAAgC,yBAAyB,EAAE,uCAAuC,gCAAgC,EAAE,2FAA2F,qBAAqB,EAAE,mBAAmB,uBAAuB,EAAE,mBAAmB,uBAAuB,EAAE,UAAU,qBAAqB,EAAE,UAAU,wBAAwB,EAAE,UAAU,sBAAsB,EAAE,uBAAuB,sBAAsB,EAAE,mBAAmB,wBAAwB,EAAE,UAAU,sBAAsB,EAAE,UAAU,wBAAwB,EAAE,uFAAuF,2BAA2B,EAAE,UAAU,uBAAuB,EAAE,iGAAiG,yBAAyB,yBAAyB,kBAAkB,EAAE,0IAA0I,wBAAwB,oBAAoB,oBAAoB,sBAAsB,EAAE,qEAAqE,mBAAmB,eAAe,iBAAiB,yBAAyB,yBAAyB,kBAAkB,EAAE,+FAA+F,mBAAmB,eAAe,0BAA0B,sBAAsB,sBAAsB,uBAAuB,EAAE,gFAAgF,kBAAkB,mBAAmB,EAAE,wCAAwC,uCAAuC,EAAE,+GAA+G,mBAAmB,eAAe,EAAE,+BAA+B,qBAAqB,iBAAiB,8BAA8B,sCAAsC,EAAE,mCAAmC,iBAAiB,cAAc,0BAA0B,EAAE,gEAAgE,gBAAgB,iBAAiB,8BAA8B,EAAE,2CAA2C,kBAAkB,mBAAmB,gCAAgC,EAAE,kCAAkC,iBAAiB,oBAAoB,2BAA2B,mBAAmB,EAAE,kCAAkC,iBAAiB,wBAAwB,8BAA8B,oBAAoB,2BAA2B,mBAAmB,uBAAuB,EAAE,mCAAmC,iBAAiB,EAAE,iCAAiC,iBAAiB,oBAAoB,2BAA2B,mBAAmB,EAAE,oDAAoD,gBAAgB,EAAE,qGAAqG,yBAAyB,yBAAyB,kBAAkB,EAAE,8IAA8I,wBAAwB,oBAAoB,oBAAoB,sBAAsB,EAAE,uDAAuD,iBAAiB,kBAAkB,mBAAmB,qBAAqB,eAAe,8BAA8B,EAAE,qEAAqE,mBAAmB,eAAe,iBAAiB,yBAAyB,yBAAyB,kBAAkB,EAAE,+FAA+F,mBAAmB,eAAe,0BAA0B,sBAAsB,sBAAsB,uBAAuB,EAAE,gFAAgF,kBAAkB,mBAAmB,EAAE,wCAAwC,qCAAqC,EAAE,G;;;;;;;;;;;;;;;;;;;;;;;;;;ACA98T;AAC4B;AACrC;AACgB;AACL;AACK;AAIS;AAEN;AAE5D;;GAEG;AAMH;IAEI,2BAAoB,WAAwB,EAAU,MAAc,EAAU,qBAA4C;QAAtG,gBAAW,GAAX,WAAW,CAAa;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,0BAAqB,GAArB,qBAAqB,CAAuB;QAO1H;;WAEG;QACI,UAAK,GAAW,EAAE,CAAC;QAE1B;;WAEG;QACI,WAAM,GAAgB,EAAE,CAAC;QAEhC;;WAEG;QACI,cAAS,GAAwB,EAAE,CAAC;IApBmF,CAAC;IAsB/H;;MAEE;IACF,oCAAQ,GAAR;QAAA,iBAmBC;QAlBG,2CAA2C;QAC3C,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,SAAS,CAAC,UAAC,MAAc,IAAK,YAAI,CAAC,MAAM,GAAG,MAAM,EAApB,CAAoB,CAAC,CAAC;QAEhG,wCAAwC;QACxC,IAAI,qEAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YAC3C,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,0EAAY,CAAC,UAAU,GAAG,0EAAY,CAAC,mBAAmB,CAAC,CAAC;SACzF;QAED,mBAAmB;QACnB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC;QAElD,eAAe;QACf,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC;QAEpD,6BAA6B;QAC7B,IAAI,CAAC,WAAW,EAAE,CAAC;QAEnB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC/C,CAAC;IAED;;OAEG;IACI,uCAAW,GAAlB;QACI,wBAAwB;QACxB,IAAG,6EAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,IAAI,6EAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,EAAC;YAC/H,KAAiB,UAAqC,EAArC,SAAI,CAAC,qBAAqB,CAAC,UAAU,EAArC,cAAqC,EAArC,IAAqC,EAAC;gBAAnD,IAAI,KAAK;gBACT,IAAI,aAAa,GAAW,EAAE,CAAC;gBAC/B,KAAgB,UAAU,EAAV,SAAI,CAAC,KAAK,EAAV,cAAU,EAAV,IAAU,EAAC;oBAAvB,IAAI,IAAI;oBACR,IAAG,KAAK,CAAC,SAAS,KAAK,IAAI,CAAC,SAAS,EAAC;wBAClC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBAC5B;iBACJ;gBAED,IAAI,QAAQ,GAAsB,IAAI,mFAAiB,EAAE,CAAC;gBAC1D,QAAQ,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;gBACrC,QAAQ,CAAC,KAAK,GAAG,aAAa,CAAC;gBAE/B,gCAAgC;gBAChC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACjC;SACJ;IACL,CAAC;IAtEQ,iBAAiB;QAL7B,wEAAS,CAAC;YACT,QAAQ,EAAE,cAAc;;;SAGzB,CAAC;yCAGmC,0EAAW,EAAkB,+DAAM,EAAiC,+FAAqB;OAFjH,iBAAiB,CAuE7B;IAAD,wBAAC;CAAA;AAvE6B;;;;;;;;ACrB9B,8pBAA8pB,iBAAiB,0D;;;;;;;ACA/qB,qCAAqC,0OAA0O,sBAAsB,uBAAuB,eAAe,EAAE,6FAA6F,uBAAuB,uBAAuB,EAAE,yBAAyB,cAAc,eAAe,qBAAqB,EAAE,uBAAuB,0BAA0B,mBAAmB,EAAE,oBAAoB,iBAAiB,EAAE,sBAAsB,iBAAiB,0FAA0F,EAAE,mCAAmC,gCAAgC,uBAAuB,qBAAqB,wKAAwK,EAAE,0OAA0O,uBAAuB,eAAe,EAAE,oFAAoF,qCAAqC,6BAA6B,uCAAuC,uCAAuC,6CAA6C,6CAA6C,gCAAgC,gCAAgC,EAAE,sDAAsD,iBAAiB,oBAAoB,2BAA2B,uBAAuB,gBAAgB,8BAA8B,EAAE,uHAAuH,gBAAgB,iBAAiB,8BAA8B,iBAAiB,gBAAgB,qCAAqC,EAAE,iCAAiC,gCAAgC,sBAAsB,EAAE,wDAAwD,gBAAgB,iBAAiB,8BAA8B,iBAAiB,cAAc,sBAAsB,EAAE,iCAAiC,4BAA4B,iBAAiB,kBAAkB,EAAE,iCAAiC,4BAA4B,sBAAsB,gCAAgC,yBAAyB,EAAE,uCAAuC,gCAAgC,EAAE,2FAA2F,qBAAqB,EAAE,mBAAmB,uBAAuB,EAAE,mBAAmB,uBAAuB,EAAE,UAAU,qBAAqB,EAAE,UAAU,wBAAwB,EAAE,UAAU,sBAAsB,EAAE,uBAAuB,sBAAsB,EAAE,mBAAmB,wBAAwB,EAAE,UAAU,sBAAsB,EAAE,UAAU,wBAAwB,EAAE,uFAAuF,2BAA2B,EAAE,UAAU,uBAAuB,EAAE,0OAA0O,sBAAsB,uBAAuB,eAAe,EAAE,+FAA+F,uBAAuB,eAAe,uBAAuB,EAAE,iCAAiC,0BAA0B,wBAAwB,oBAAoB,wBAAwB,uBAAuB,yBAAyB,wBAAwB,2BAA2B,mBAAmB,EAAE,8GAA8G,iBAAiB,kBAAkB,wBAAwB,8BAA8B,mBAAmB,eAAe,uBAAuB,EAAE,6CAA6C,mBAAmB,mBAAmB,sBAAsB,6BAA6B,qBAAqB,4BAA4B,yBAAyB,yBAAyB,gCAAgC,EAAE,8CAA8C,mBAAmB,mBAAmB,sBAAsB,6BAA6B,yBAAyB,yBAAyB,gCAAgC,EAAE,yE;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA1pJ;AACmC;AACjC;AACX;AACuB;AACiB;AACK;AAE/B;AACK;AACL;AAGvD;;GAEG;AAMH;IAEI;;OAEG;IACH,yBAAoB,aAA4B,EAAU,MAAc,EAAU,qBAA4C;QAA1G,kBAAa,GAAb,aAAa,CAAe;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,0BAAqB,GAArB,qBAAqB,CAAuB;QAS9H;;WAEG;QACI,eAAU,GAAc,IAAI,iEAAS,CAAC;YACzC,YAAY,EAAE,IAAI,mEAAW,CAAC,EAAE,EAAE,CAAC,kEAAU,CAAC,QAAQ,EAAE,kEAAU,CAAC,SAAS,CAAC,kEAAQ,CAAC,qBAAqB,CAAC;gBACxG,kEAAU,CAAC,KAAK,CAAC,CAAC;YACtB,eAAe,EAAE,IAAI,mEAAW,CAAC,EAAE,EAAE,CAAC,kEAAU,CAAC,QAAQ,EAAE,kEAAU,CAAC,SAAS,CAAC,kEAAQ,CAAC,wBAAwB,CAAC;gBAC9G,kEAAU,CAAC,OAAO,CAAC,qEAAU,CAAC,sBAAsB,CAAC,CAAC,CAAC;SAC9D,CAAC,CAAC;QAhBC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAsBD,kCAAQ,GAAR;IACA,CAAC;IAED;;OAEG;IACI,gCAAM,GAAb;QAAA,iBAgBC;QAfG,YAAY;QACZ,IAAI,GAAG,GAAyB,IAAI,oGAAoB,EAAE,CAAC;QAC3D,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC;QACtD,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC;QAE5D,iBAAiB;QACjB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,UAAC,GAA0B;YAChE,4CAA4C;YAC5C,IAAI,qEAAU,CAAC,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBAC1C,KAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACxD,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,0EAAY,CAAC,UAAU,GAAG,0EAAY,CAAC,YAAY,CAAC,CAAC;aAClF;iBAAM;gBACH,KAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,iBAAiB,CAAC;aACnD;QACL,CAAC,CAAC;IACN,CAAC;IAED;;;OAGG;IACI,4CAAkB,GAAzB;QACI,IAAI,KAAK,GAAoB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QACjE,kBAAkB;QAClB,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;YAC9D,IAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,mCAAmC,CAAC;YAClE,OAAO,IAAI,CAAC;SACf;aAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;YACtE,IAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,iCAAiC,CAAC;YAChE,OAAO,IAAI,CAAC;SACf;aAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;YAClE,IAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,gCAAgC,CAAC;YAC/D,OAAO,IAAI,CAAC;SACf;QAED,IAAI,QAAQ,GAAoB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACvE,gBAAgB;QAChB,IAAI,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;YACvE,IAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,sCAAsC,CAAC;YACrE,OAAO,IAAI,CAAC;SACf;aAAM,IAAI,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;YAC/E,IAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,oCAAoC,CAAC;YACnE,OAAO,IAAI,CAAC;SACf;aAAM,IAAI,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;YAC7E,IAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,4BAA4B,CAAC;YAC3D,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IApFQ,eAAe;QAL3B,wEAAS,CAAC;YACT,QAAQ,EAAE,YAAY;;;SAGvB,CAAC;yCAMqC,8EAAa,EAAkB,+DAAM,EAAiC,+FAAqB;OALrH,eAAe,CAsF3B;IAAD,sBAAC;CAAA;AAtF2B;;;;;;;;ACrB5B,iwBAAiwB,iBAAiB,wD;;;;;;;ACAlxB,qCAAqC,8MAA8M,sBAAsB,uBAAuB,eAAe,EAAE,6FAA6F,uBAAuB,uBAAuB,EAAE,yBAAyB,cAAc,eAAe,qBAAqB,EAAE,uBAAuB,0BAA0B,mBAAmB,EAAE,oBAAoB,iBAAiB,EAAE,sBAAsB,iBAAiB,0FAA0F,EAAE,mCAAmC,gCAAgC,uBAAuB,qBAAqB,wKAAwK,EAAE,8MAA8M,uBAAuB,eAAe,EAAE,oFAAoF,qCAAqC,6BAA6B,uCAAuC,uCAAuC,6CAA6C,6CAA6C,gCAAgC,gCAAgC,EAAE,sDAAsD,iBAAiB,oBAAoB,2BAA2B,uBAAuB,gBAAgB,8BAA8B,EAAE,uHAAuH,gBAAgB,iBAAiB,8BAA8B,iBAAiB,gBAAgB,qCAAqC,EAAE,iCAAiC,gCAAgC,sBAAsB,EAAE,wDAAwD,gBAAgB,iBAAiB,8BAA8B,iBAAiB,cAAc,sBAAsB,EAAE,iCAAiC,4BAA4B,iBAAiB,kBAAkB,EAAE,iCAAiC,4BAA4B,sBAAsB,gCAAgC,yBAAyB,EAAE,uCAAuC,gCAAgC,EAAE,2FAA2F,qBAAqB,EAAE,mBAAmB,uBAAuB,EAAE,mBAAmB,uBAAuB,EAAE,UAAU,qBAAqB,EAAE,UAAU,wBAAwB,EAAE,UAAU,sBAAsB,EAAE,uBAAuB,sBAAsB,EAAE,mBAAmB,wBAAwB,EAAE,UAAU,sBAAsB,EAAE,UAAU,wBAAwB,EAAE,uFAAuF,2BAA2B,EAAE,UAAU,uBAAuB,EAAE,+FAA+F,uBAAuB,eAAe,uBAAuB,EAAE,iCAAiC,4BAA4B,0BAA0B,sBAAsB,6BAA6B,qBAAqB,EAAE,8GAA8G,iBAAiB,kBAAkB,wBAAwB,8BAA8B,mBAAmB,eAAe,uBAAuB,EAAE,6CAA6C,mBAAmB,mBAAmB,sBAAsB,6BAA6B,qBAAqB,4BAA4B,yBAAyB,yBAAyB,gCAAgC,EAAE,8CAA8C,mBAAmB,mBAAmB,sBAAsB,6BAA6B,yBAAyB,yBAAyB,gCAAgC,EAAE,oGAAoG,uBAAuB,eAAe,EAAE,G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA11I;AACa;AACjC;AACY;AACsB;AACjB;AAE5B;AACmB;AACL;AAC0B;AAC1B;AAEvD;;GAEG;AAMH;IAEI,+BAA+B;IAC/B,gBAAgB;IAChB,+BAA+B;IAE/B;;OAEG;IACH,yBAAoB,aAA4B,EAAU,MAAc,EAAU,qBAA4C;QAA1G,kBAAa,GAAb,aAAa,CAAe;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,0BAAqB,GAArB,qBAAqB,CAAuB;QAO9H;;WAEG;QAEI,WAAM,GAAG,IAAI,mEAAY,EAAU,CAAC;QAO3C;;WAEG;QACI,eAAU,GAAc,IAAI,iEAAS,CAAC;YACzC,eAAe,EAAE,IAAI,mEAAW,CAAC,EAAE,EAAE,CAAC,kEAAU,CAAC,QAAQ,EAAE,kEAAU,CAAC,SAAS,CAAC,kEAAQ,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAChH,YAAY,EAAE,IAAI,mEAAW,CAAC,EAAE,EAAE,CAAC,kEAAU,CAAC,QAAQ,EAAE,kEAAU,CAAC,SAAS,CAAC,kEAAQ,CAAC,qBAAqB,CAAC;gBACxG,kEAAU,CAAC,KAAK,CAAC,CAAC;YACtB,eAAe,EAAE,IAAI,mEAAW,CAAC,EAAE,EAAE,CAAC,kEAAU,CAAC,QAAQ,EAAE,kEAAU,CAAC,SAAS,CAAC,kEAAQ,CAAC,wBAAwB,CAAC;gBAC9G,kEAAU,CAAC,OAAO,CAAC,sEAAU,CAAC,sBAAsB,CAAC,CAAC,CAAC;SAC9D,CAAC;QA1BE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAED,kCAAQ,GAAR;IACA,CAAC;IAwBD;;OAEG;IACI,gCAAM,GAAb;QAAA,iBA0BC;QAzBG,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,EAAE;YAC5B,WAAW;YACX,IAAI,GAAG,GAAyB,IAAI,oGAAoB,EAAE,CAAC;YAC3D,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC;YAC5D,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC;YACtD,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC;YAC5D,GAAG,CAAC,QAAQ,GAAG,mFAAe,CAAC,mBAAmB,CAAC;YAEnD,oBAAoB;YACpB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,UAAC,GAA0B;gBAChE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;gBACjC,2CAA2C;gBAC3C,IAAI,CAAC,qEAAU,CAAC,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;oBAC3C,KAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,sBAAsB,CAAC;oBACrD,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,aAAa,CAAC,CAAC;iBACnC;qBAAM;oBACH,KAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;oBACxD,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,0EAAY,CAAC,UAAU,GAAG,0EAAY,CAAC,YAAY,CAAC,CAAC;iBAClF;YACD,CAAC,EACD,UAAC,KAAK;gBACF,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;YAC9C,CAAC,CACJ;SACJ;IACL,CAAC;IAED;;;OAGG;IACI,4CAAkB,GAAzB;QACI,IAAI,QAAQ,GAAoB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACvE,aAAa;QACb,IAAI,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;YACzE,IAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,sCAAsC,CAAC;YACrE,OAAO,IAAI,CAAC;SACb;aAAM,IAAI,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;YACjF,IAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,oCAAoC,CAAC;YACnE,OAAO,IAAI,CAAC;SACb;QAED,IAAI,KAAK,GAAoB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QACjE,kBAAkB;QAClB,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;YAChE,IAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,mCAAmC,CAAC;YAClE,OAAO,IAAI,CAAC;SACb;aAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;YACxE,IAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,iCAAiC,CAAC;YAChE,OAAO,IAAI,CAAC;SACb;aAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;YAClE,IAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,yBAAyB,CAAC;YACxD,OAAO,IAAI,CAAC;SACf;QAED,IAAI,QAAQ,GAAoB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACvE,gBAAgB;QAChB,IAAI,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;YACzE,IAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,sCAAsC,CAAC;YACrE,OAAO,IAAI,CAAC;SACb;aAAM,IAAI,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;YACjF,IAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,oCAAoC,CAAC;YACnE,OAAO,IAAI,CAAC;SACb;aAAM,IAAI,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;YAC7E,IAAI,CAAC,aAAa,GAAG,kEAAQ,CAAC,4BAA4B,CAAC;YAC3D,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IA1FD;QADC,qEAAM,EAAE;;mDACkC;IApBlC,eAAe;QAL3B,wEAAS,CAAC;YACT,QAAQ,EAAE,YAAY;;;SAGvB,CAAC;yCAUqC,8EAAa,EAAkB,+DAAM,EAAiC,+FAAqB;OATrH,eAAe,CAgH3B;IAAD,sBAAC;CAAA;AAhH2B;;;;;;;;;ACrB5B;AAAA;;GAEG;AACI,IAAO,QAAQ,CAiLrB;AAjLD,WAAc,QAAQ;IAElB;;OAEG;IACU,cAAK,GAAW,EAAE,CAAC;IAEhC;;OAEG;IACU,cAAK,GAAW,GAAG,CAAC;IAEjC;;OAEG;IACU,qBAAY,GAAW,IAAI,CAAC;IAEzC;;OAEG;IACU,uBAAc,GAAW,GAAG,CAAC;IAE1C,+BAA+B;IAC/B,YAAY;IACZ,+BAA+B;IAC/B;;OAEG;IACU,8BAAqB,GAAW,GAAG,CAAC;IAEjD;;OAEG;IACU,8BAAqB,GAAW,EAAE,CAAC;IAEhD;;OAEG;IACU,8BAAqB,GAAW,CAAC,CAAC;IAE/C;;OAEG;IACU,6BAAoB,GAAW,GAAG,CAAC;IAEhD;;OAEG;IACU,6BAAoB,GAAW,EAAE,CAAC;IAE/C;;OAEG;IACU,8BAAqB,GAAW,GAAG,CAAC;IAEjD;;OAEG;IACU,iCAAwB,GAAW,GAAG,CAAC;IAEpD;;OAEG;IACU,8BAAqB,GAAW,CAAC,CAAC;IAE/C,+BAA+B;IAC/B,iBAAiB;IACjB,+BAA+B;IAC/B;;OAEG;IACU,qCAA4B,GAAW,2BAA2B,CAAC;IAEhF;;OAEG;IACU,qCAA4B,GAAW,6BAA6B,CAAC;IAElF;;OAEG;IACU,mCAA0B,GAAW,uBAAuB,CAAC;IAE1E;;OAEG;IACU,mCAA0B,GAAW,qBAAqB,CAAC;IAExE;;OAEG;IACU,uCAA8B,GAAW,kBAAkB,CAAC;IAEzE;;OAEG;IACU,kCAAyB,GAAW,4BAA4B,CAAC;IAE9E;;OAEG;IACU,uCAA8B,GAAW,oCAAoC,CAAC;IAE3F;;OAEG;IACU,+CAAsC,GAAW,yBAAyB,CAAC;IAExF;;OAEG;IACU,6CAAoC,GAAW,uBAAuB,CAAC;IAEpF;;OAEG;IACU,4CAAmC,GAAW,mCAAmC,CAAC;IAE/F;;OAEG;IACU,yCAAgC,GAAW,4BAA4B,CAAC;IAErF;;OAEG;IACU,0CAAiC,GAAW,kCAAkC,CAAC;IAE5F;;OAEG;IACU,+CAAsC,GAAW,+BAA+B,CAAC;IAE9F;;OAEG;IACU,6CAAoC,GAAW,8BAA8B,CAAC;IAE3F;;OAEG;IACU,kCAAyB,GAAW,0BAA0B,CAAC;IAE5E;;OAEG;IACU,qCAA4B,GAAW,wBAAwB,CAAC;IAE7E;;OAEG;IACU,+BAAsB,GAAW,yBAAyB,CAAC;IAExE;;OAEG;IACU,0BAAiB,GAAW,qDAAqD,CAAC;IAE/F,+BAA+B;IAC/B,aAAa;IACb,+BAA+B;IAE/B;;OAEG;IACU,6BAAoB,GAAW,sBAAsB,CAAC;IAEnE;;OAEG;IACU,iCAAwB,GAAW,iBAAiB,CAAC;IAElE;;OAEG;IACU,oCAA2B,GAAW,iBAAiB,CAAC;AAEzE,CAAC,EAjLa,QAAQ,KAAR,QAAQ,QAiLrB;;;;;;;;;ACpLD;AAAA;;GAEG;AACI,IAAO,YAAY,CA0GzB;AA1GD,WAAc,YAAY;IAExB,+BAA+B;IAC/B,oBAAoB;IACpB,+BAA+B;IAE/B;;OAEG;IACU,qBAAQ,GAAG,yBAAyB,CAAC;IAElD;;OAEG;IACU,6BAAgB,GAAG,QAAQ,CAAC;IAEzC;;OAEG;IACU,0BAAa,GAAG,OAAO,CAAC;IAErC;;OAEG;IACU,0BAAa,GAAG,OAAO,CAAC;IAErC;;OAEG;IACU,qCAAwB,GAAG,QAAQ,CAAC;IAEjD;;OAEG;IACU,uBAAU,GAAG,GAAG,CAAC;IAE9B,+BAA+B;IAC/B,UAAU;IACV,+BAA+B;IAC/B;;OAEG;IACU,yBAAY,GAAG,EAAE,CAAC;IAE/B;;OAEG;IACU,yBAAY,GAAG,MAAM,CAAC;IAEnC;;OAEG;IACU,6BAAgB,GAAW,yBAAY,GAAG,WAAW,CAAC;IAEnE;;OAEG;IACU,gCAAmB,GAAG,QAAQ,CAAC;IAE5C;;OAEG;IACU,gCAAmB,GAAG,QAAQ,CAAC;IAE5C,+BAA+B;IAC/B,iBAAiB;IACjB,+BAA+B;IAC/B;;OAEG;IACU,4BAAe,GAAG,qBAAQ,GAAG,6BAAgB,GAAG,0BAAa,GAAG,SAAS,CAAC;IAEvF;;OAEG;IACU,2BAAc,GAAG,qBAAQ,GAAG,6BAAgB,GAAG,0BAAa,GAAG,QAAQ,CAAC;IAErF;;OAEG;IACU,4BAAe,GAAG,qBAAQ,GAAG,6BAAgB,GAAG,0BAAa,GAAG,SAAS,CAAC;IAEvF;;OAEG;IACU,4BAAe,GAAG,qBAAQ,GAAG,6BAAgB,GAAG,0BAAa,GAAG,SAAS,CAAC;IAEvF;;OAEG;IACU,8BAAiB,GAAG,qBAAQ,GAAG,6BAAgB,GAAG,0BAAa,GAAG,WAAW,CAAC;IAE3F;;OAEG;IACU,2BAAc,GAAG,qBAAQ,GAAG,6BAAgB,GAAG,0BAAa,GAAG,qCAAwB,CAAC;IAErG;;OAEG;IACU,4BAAe,GAAG,qBAAQ,GAAG,6BAAgB,GAAG,0BAAa,GAAG,SAAS,CAAC;IAEvF;;OAEG;IACU,4BAAe,GAAG,qBAAQ,GAAG,6BAAgB,GAAG,0BAAa,GAAG,SAAS,CAAC;AACzF,CAAC,EA1Ga,YAAY,KAAZ,YAAY,QA0GzB;;;;;;;;;AC7GD;AAAA;;GAEG;AACH;IAAA;IA+EA,CAAC;IA1CQ,wCAAY,GAAnB;QACE,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IACM,wCAAY,GAAnB,UAAqB,SAAiB;QACpC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IACM,wCAAY,GAAnB;QACE,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IACM,wCAAY,GAAnB,UAAqB,SAAiB;QACpC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IACM,wCAAY,GAAnB;QACE,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IACM,wCAAY,GAAnB,UAAqB,SAAwB;QAC3C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IACM,uCAAW,GAAlB;QACE,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IACM,uCAAW,GAAlB,UAAoB,QAAc;QAChC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IACM,4CAAgB,GAAvB;QACE,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IACM,4CAAgB,GAAvB,UAAyB,aAAqB;QAC5C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACrC,CAAC;IACM,qCAAS,GAAhB;QACE,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IACM,qCAAS,GAAhB,UAAkB,MAAc;QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IACM,uCAAW,GAAlB;QACE,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IACM,uCAAW,GAAlB,UAAoB,QAAgB;QAClC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IACH,wBAAC;AAAD,CAAC;;;;;;;;;;AClFD;AAAA;;GAEG;AACH;IAAA;IAaA,CAAC;IANU,0CAAS,GAAhB;QACI,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IACM,0CAAS,GAAhB,UAAiB,MAAc;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IACL,6BAAC;AAAD,CAAC;;;;;;;;;;AChBD;AAAA;;GAEG;AACH;IAAA;IAgBA,CAAC;IAAD,kCAAC;AAAD,CAAC;;;;;;;;;;ACnBD;AAAA;;GAEG;AACH;IAAA;IAYA,CAAC;IAAD,2BAAC;AAAD,CAAC;;;;;;;;;;ACfD;AAAA;;GAEG;AACH;IAAA;IA8CA,CAAC;IAAD,2BAAC;AAAD,CAAC;;;;;;;;;;AC/CD;AAAA;;GAEG;AACH;IAAA;IAWA,CAAC;IAAD,wBAAC;AAAD,CAAC;;;;;;;;;;AChBD;AAAA;;GAEG;AACH;IAAA;IAsBA,CAAC;IAAD,gBAAC;AAAD,CAAC;;;;;;;;;;ACzBD;AAAA;;GAEG;AACH;IAAA;IA2FA,CAAC;IAjDQ,wBAAS,GAAhB;QACE,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IACM,wBAAS,GAAhB,UAAiB,MAAc;QAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IACM,2BAAY,GAAnB;QACE,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IACM,2BAAY,GAAnB,UAAoB,SAAiB;QACnC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IACM,2BAAY,GAAnB;QACE,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IACM,2BAAY,GAAnB,UAAoB,SAAiB;QACnC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IACM,2BAAY,GAAnB;QACE,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IACM,2BAAY,GAAnB,UAAoB,SAAwB;QAC1C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IACM,0BAAW,GAAlB;QACE,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IACM,0BAAW,GAAlB,UAAmB,QAAuB;QACxC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IACM,+BAAgB,GAAvB;QACE,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IACM,+BAAgB,GAAvB,UAAwB,aAAqB;QAC3C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACrC,CAAC;IACM,wBAAS,GAAhB;QACE,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IACM,wBAAS,GAAhB,UAAiB,MAAc;QAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IACM,0BAAW,GAAlB;QACE,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IACM,0BAAW,GAAlB,UAAmB,QAAgB;QACjC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAEH,WAAC;AAAD,CAAC;;;;;;;;;;AC5FD;AAAA;AAAA;AAAA;AAAkC;AACY;AAE9C;;GAEG;AACH;IAAA;IAiBA,CAAC;IAfG;;;;OAIG;IACW,8BAAW,GAAzB,UAA0B,KAAwB;QAE9C,IAAI,KAAK,CAAC,KAAK,YAAY,UAAU,EAAE;YACrC,OAAO,CAAC,KAAK,CAAC,kEAAQ,CAAC,oBAAoB,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,GAAG,kEAAQ,CAAC,YAAY,CAAC,CAAC;SAC5F;QAED,OAAO,CAAC,KAAK,CAAC,kEAAQ,CAAC,wBAAwB,GAAG,KAAK,CAAC,MAAM,GAAG,kEAAQ,CAAC,2BAA2B,GAAG,KAAK,CAAC,KAAK,GAAG,kEAAQ,CAAC,YAAY,CAAC,CAAC;QAE7I,OAAO,gDAAU,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;IACL,yBAAC;AAAD,CAAC;;;;;;;;;ACzBD,4mB;;;;;;;ACAA,qCAAqC,iGAAiG,qCAAqC,EAAE,uBAAuB,kBAAkB,oBAAoB,oDAAoD,EAAE,sBAAsB,yCAAyC,qBAAqB,+BAA+B,gBAAgB,+CAA+C,+CAA+C,sBAAsB,EAAE,qBAAqB,yCAAyC,qBAAqB,+BAA+B,gBAAgB,+CAA+C,+CAA+C,sBAAsB,EAAE,uFAAuF,gBAAgB,8BAA8B,wBAAwB,mBAAmB,kBAAkB,EAAE,uBAAuB,oBAAoB,uBAAuB,EAAE,wFAAwF,8BAA8B,gBAAgB,iBAAiB,EAAE,uBAAuB,uBAAuB,oBAAoB,kBAAkB,mBAAmB,EAAE,G;;;;;;;;;;;;;;;;;;;ACAzuC;AAOlD;IAEE;IAAgB,CAAC;IAEjB,wCAAQ,GAAR;IACA,CAAC;IALU,qBAAqB;QALjC,wEAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;;;SAG7B,CAAC;;OACW,qBAAqB,CAOjC;IAAD,4BAAC;CAAA;AAPiC;;;;;;;;;;;;;;;;;;;;;;;;;ACPO;AACc;AACE;AACW;AACW;AACA;AAChC;AACiC;AACe;AAE/F,IAAM,MAAM,GAAW;IACnB,EAAE,IAAI,EAAE,0EAAY,CAAC,YAAY,EAAE,SAAS,EAAE,gHAAqB,EAAE;IACrE,EAAE,IAAI,EAAE,0EAAY,CAAC,YAAY,EAAE,SAAS,EAAE,qFAAa,EAAE;IAC7D,EAAE,IAAI,EAAE,0EAAY,CAAC,mBAAmB,EAAE,SAAS,EAAE,gGAAe,EAAC;IACrE,EAAE,IAAI,EAAE,0EAAY,CAAC,mBAAmB,EAAE,SAAS,EAAE,gGAAe,EAAC;IACrE,EAAE,IAAI,EAAE,0EAAY,CAAC,gBAAgB,EAAE,SAAS,EAAE,iGAAiB,EAAE;CACxE,CAAC;AAMF;IAAA;IAAgC,CAAC;IAApB,gBAAgB;QAJ5B,uEAAQ,CAAC;YACR,OAAO,EAAE,CAAC,qEAAY,EAAE,qEAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,qEAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACpF,OAAO,EAAE,CAAC,qEAAY,CAAC;SACxB,CAAC;OACW,gBAAgB,CAAI;IAAD,uBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;ACtBY;AACM;AAES;AASxD;IAAA;IAAyB,CAAC;IAAb,SAAS;QAPrB,uEAAQ,CAAC;YACR,OAAO,EAAE;gBACP,qEAAY;gBACZ,6EAAgB;aACjB;YACD,YAAY,EAAE,EAAE;SACjB,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;ACZqB;AAEY;AAIvD;;GAEG;AAEH;IAEI;QAEA;;;WAGG;QACK,WAAM,GAA4B,IAAI,6EAAe,CAAS,YAAY,CAAC,CAAC;QAEpF;;WAEG;QACI,qBAAgB,GAAuB,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;IAXzD,CAAC;IAajB;;OAEG;IACI,gDAAgB,GAAvB,UAAwB,MAAc;QAClC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC;IAED;;OAEG;IACI,wCAAQ,GAAf;QACI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IA3BQ,qBAAqB;QADjC,yEAAU,EAAE;;OACA,qBAAqB,CAuCjC;IAAD,4BAAC;CAAA;AAvCiC;;;;;;;;;;;;;;;;;;;;;;;;ACVS;AACoB;AAET;AACV;AAC2B;AAIvE;;GAEG;AAEH;IAEI;;OAEG;IACH,uBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC;;;;OAIG;IACI,8BAAM,GAAb,UAAc,oBAA0C;QACpD,gBAAgB;QAChB,IAAM,OAAO,GAAG;YACd,OAAO,EAAG,IAAI,yEAAW,CAAC;gBACtB,cAAc,EAAG,kBAAkB;aACpC,CAAC;SACL,CAAC;QAEF,mBAAmB;QACnB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAuB,0EAAY,CAAC,eAAe,EAAE,oBAAoB,EAAE,OAAO,CAAC;aACnG,IAAI,CAAC,UAAC,GAAsC;YACzC,WAAW;YACX,GAAG,CAAC,SAAS,CAAC,UAAC,GAA0B,IAAK,mBAAY,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,EAAtC,CAAsC,CAAC,CAAC;YACtF,OAAO,GAAG,CAAC;QACf,CAAC,CAAC;aACD,IAAI,CAAC,0EAAU,CAAC,2FAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;IAC1D,CAAC;IA5BQ,aAAa;QADzB,yEAAU,EAAE;yCAMiB,wEAAU;OAL3B,aAAa,CA8BzB;IAAD,oBAAC;CAAA;AA9ByB;;;;;;;;;;;;;;;;;;;;;;ACbiB;AACuB;AACjB;AAEjD;;GAEG;AAEH;IAEI,wBAAoB,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;IAAI,CAAC;IAOrE;;OAEG;IACI,gCAAO,GAAd;QACI,IAAG,IAAI,CAAC,UAAU,EAAE,EAAE;YAClB,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,CAAC;SACzC;QAAA,CAAC;IACN,CAAC;IAAA,CAAC;IAEF;;;OAGG;IACI,mCAAU,GAAjB;QAAA,iBASC;QARG,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,SAAS,CAAC,UAAC,MAAc;YACjE,IAAI,qEAAU,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE;gBACtC,KAAI,CAAC,YAAY,GAAG,KAAK,CAAC;aAC7B;iBAAM;gBACH,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;aAC5B;QACL,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAAA,CAAC;IA/BO,cAAc;QAD1B,yEAAU,EAAE;yCAGkC,uFAAqB;OAFvD,cAAc,CAiC1B;IAAD,qBAAC;CAAA;AAjC0B;;;;;;;;;;;;;;;;;;;;;;;;ACRgB;AACoB;AAET;AACV;AAC2B;AAIvE;;GAEG;AAEH;IAEI;;OAEG;IACH,uBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC;;;;OAIG;IACI,8BAAM,GAAb,UAAc,oBAA0C;QACpD,gBAAgB;QAChB,IAAM,OAAO,GAAG;YACd,OAAO,EAAG,IAAI,yEAAW,CAAC;gBACtB,cAAc,EAAG,kBAAkB;aACpC,CAAC;SACL,CAAC;QAEF,mBAAmB;QACnB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAuB,0EAAY,CAAC,eAAe,EAAE,oBAAoB,EAAE,OAAO,CAAC;aACnG,IAAI,CAAC,0EAAU,CAAC,2FAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;IAC1D,CAAC;IAvBQ,aAAa;QADzB,yEAAU,EAAE;yCAMiB,wEAAU;OAL3B,aAAa,CAyBzB;IAAD,oBAAC;CAAA;AAzByB;;;;;;;;;;;;;;;;;;;;;;;;ACbiB;AACoB;AAGT;AACV;AAC2B;AAIvE;;GAEG;AAEH;IAEI;;OAEG;IACH,0BAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC;;OAEG;IACI,gCAAK,GAAZ,UAAa,MAAc;QACzB,sBAAsB;QACtB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAChB,0EAAY,CAAC,cAAc,EAC3B,EAAE,MAAM,EAAE;gBACJ,MAAM,EAAE,MAAM;aACjB;SACF,CAAC;aACD,IAAI,CAAC,0EAAU,CAAC,2FAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;IACxD,CAAC;IAED;;;;OAIG;IACI,wCAAa,GAApB,UAAqB,GAAgC;QACnD,0BAA0B;QAC1B,IAAM,WAAW,GAAG;YAChB,OAAO,EAAG,IAAI,yEAAW,CAAC;gBACtB,cAAc,EAAG,kBAAkB;aACtC,CAAC;SACL,CAAC;QACF,cAAc;QACd,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAA8B,0EAAY,CAAC,cAAc,EAAE,GAAG,EAAE,WAAW,CAAC;aAC5F,IAAI,CAAC,0EAAU,CAAC,2FAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;IAC1D,CAAC;IApCU,gBAAgB;QAD5B,yEAAU,EAAE;yCAMiB,wEAAU;OAL3B,gBAAgB,CAsC5B;IAAD,uBAAC;CAAA;AAtC4B;;;;;;;;;;;;;;;;;;;;;;;;;ACdsB;AACR;AACO;AAEN;AACb;AAEuB;AAGiB;AAMvE;;GAEG;AAEH;IAEE;;OAEG;IACH,qBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEvC;;OAEG;IACI,+BAAS,GAAhB,UAAiB,MAAc;QAC3B,sBAAsB;QACtB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAChB,0EAAY,CAAC,cAAc,EAC3B,EAAE,MAAM,EAAE;gBACN,MAAM,EAAE,MAAM;aACf;SACF,CAAC;aACD,IAAI,CAAC,0EAAU,CAAC,2FAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED;;;;OAIG;IACI,gCAAU,GAAjB,UAAkB,iBAAoC;QAClD,0BAA0B;QAC1B,IAAM,WAAW,GAAG;YAChB,OAAO,EAAG,IAAI,yEAAW,CAAC;gBACtB,cAAc,EAAG,kBAAkB;aACpC,CAAC;SACP,CAAC;QACF,cAAc;QACd,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAoB,0EAAY,CAAC,eAAe,EAAE,iBAAiB,EAAE,WAAW,CAAC;aACjG,IAAI,CAAC,0EAAU,CAAC,2FAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED;;;;OAIG;IACI,8BAAQ,GAAf,UAAgB,sBAA8C;QAC1D,0BAA0B;QAC1B,IAAM,OAAO,GAAG;YACZ,OAAO,EAAG,IAAI,yEAAW,CAAC;gBACxB,cAAc,EAAG,kBAAkB;aACpC,CAAC;SACL;QAED,qCAAqC;QACrC,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAyB,0EAAY,CAAC,iBAAiB,EAAE,sBAAsB,EAAE,OAAO,CAAC;aAC1G,IAAI,CAAC,0EAAU,CAAC,2FAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;IAE1D,CAAC;IAvDQ,WAAW;QADvB,yEAAU,EAAE;yCAMe,wEAAU;OALzB,WAAW,CA0DvB;IAAD,kBAAC;CAAA;AA1DuB;;;;;;;;;ACpBxB;AAAA;AAA2C;AAE3C;;GAEG;AACH;IAAA;IAgBA,CAAC;IAdG;;;;OAIG;IACW,uBAAQ,GAAtB,UAA0B,CAAM;QAC5B,OAAO;QACP,IAAG,gEAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAAE,OAAO,KAAK,CAAC;QAEjD,SAAS;QACT,IAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC;YAAE,OAAO,KAAK,CAAC;QAE5C,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,qBAAC;AAAD,CAAC;;;;;;;;;;ACrBD;AAAA;AAAA;AAA2C;AACG;AAE9C;;GAEG;AACH;IAAA;IAsDA,CAAC;IApDG;;OAEG;IACY,qBAAY,GAA3B,UAA4B,OAAsB;QAE9C,aAAa;QACb,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE;YACnC,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAAA,CAAC;IAEF;;;;OAIG;IACW,gCAAuB,GAArC,UAAsC,OAAe,EAAE,UAAkB;QACrE,oCAAoC;QACpC,IAAG,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAC;YAC7D,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,WAAW,GAAW,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC9C,IAAI,cAAc,GAAW,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAEpD,SAAS;QACT,IAAG,WAAW,GAAG,cAAc,EAAC;YAC5B,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACW,+BAAsB,GAApC,UAAqC,OAAoB;QACrD,IAAG,CAAC,gEAAU,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAC;YACtC,OAAO,kEAAQ,CAAC,KAAK,CAAC;SACzB;QAED,IAAI,IAAI,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;QACjC,IAAI,KAAK,GAAG,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QACnC,IAAI,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;QAE7B,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,kEAAQ,CAAC,KAAK,GAAG,KAAK,GAAG,kEAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;QAEnE,OAAO,IAAI,GAAG,kEAAQ,CAAC,KAAK,GAAG,KAAK,GAAG,kEAAQ,CAAC,KAAK,GAAG,IAAI,CAAC;IAEjE,CAAC;IACL,eAAC;AAAD,CAAC;;;;;;;;;;AC5DD;AAAA;AAAA;AAA+B;AAE/B;;GAEG;AACH;IAAA;IAoCA,CAAC;IAlCG;;;;OAIG;IACW,4BAAiB,GAA/B,UAAgC,CAAM;QAClC,IAAG,CAAC,IAAI,IAAI,EAAC;YACT,OAAO,IAAI,CAAC;SACf;QACD,IAAG,OAAO,CAAC,IAAI,SAAS,IAAI,CAAC,KAAK,WAAW,EAAC;YAC1C,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED;;;;;OAKG;IACW,qBAAU,GAAxB,UAA4B,KAAU,EAAE,GAAQ,EAAE,SAA0B;QACxE,IAAI,MAAM,GAAG;YACT,GAAG,EAAG,SAAS;SAClB,CAAC;QAEF,UAAU;QACV,IAAI,OAAO,GAAM,6CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACxC,aAAa;QACb,IAAI,YAAY,GAAW,6CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACrD,KAAK;QACL,KAAK,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;IAClC,CAAC;IAEL,iBAAC;AAAD,CAAC;;;;;;;;;;ACzCD;AAAA;;GAEG;AACH;IAAA;IAYA,CAAC;IAVG;;OAEG;IACW,6BAAkB,GAAW,uEAAuE,CAAC;IAEnH;;OAEG;IACW,iCAAsB,GAAW,gBAAgB,CAAC;IAEpE,iBAAC;CAAA;AAZsB;;;;;;;;;ACHvB;AAAA,mFAAmF;AACnF,8FAA8F;AAC9F,yEAAyE;AACzE,gFAAgF;AAEzE,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;;;;;;;;;ACPF;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,8EAAW,CAAC,UAAU,EAAE;IAC1B,+EAAc,EAAE,CAAC;CAClB;AAED,yGAAsB,EAAE,CAAC,eAAe,CAAC,kEAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/$$_lazy_route_resource lazy\n// module id = ./src/$$_lazy_route_resource lazy recursive\n// module chunks = main","module.exports = \"<!-- ヘッダー -->\\n<header>\\n    <nav id=\\\"task-manager-common-header\\\">\\n        <!-- 共通アプリタイトル -->\\n        <a routerLink=\\\"/\\\" id=\\\"task-manager-common-header-title\\\">\\n            Parallel\\n        </a>\\n    </nav>\\n    <nav id=\\\"task-manager-header-links\\\">\\n        <!-- 共通ナビゲーションリンク -->\\n        <ul class=\\\"task-manager-header-items\\\">\\n            <li *ngIf=\\\"isSignedin()\\\">\\n                <a routerLink=\\\"/task\\\">管理する</a>\\n            </li>\\n            <li>\\n                <a routerLink=\\\"/signup\\\">新しく始める</a>\\n            </li>\\n            <li *ngIf=\\\"!isSignedin()\\\">\\n                <a routerLink=\\\"/signin\\\">ログインする</a>\\n            </li>\\n            <li *ngIf=\\\"isSignedin()\\\">\\n                <a href=\\\"#\\\" (onclick)=\\\"signout()\\\">ログアウトする</a>\\n            </li>\\n        </ul>\\n    </nav>\\n    <router-outlet></router-outlet>\\n</header>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = ./src/app/app.component.html\n// module chunks = main","module.exports = \"@charset \\\"UTF-8\\\";\\n/* ----------------------\\n * 共通スタイル変数\\n * ----------------------*/\\n/* 背景色グレー1番 */\\n/* 背景色グレー2番 */\\n/* 背景色緑1番 */\\n/* 背景色緑2番 */\\n/* 背景色緑3番 */\\n/* 基本フォント色 */\\n/* 入力チェックエラー共通 */\\n.base-error-message-style {\\n  margin: 20px 20px;\\n  text-align: center;\\n  color: red; }\\n/* ----------------------\\n * 共通\\n ----------------------*/\\n/* 枠線反映しない */\\ninput, button {\\n  border-style: none;\\n  border-radius: 5px; }\\n/* リスト表示しない */\\nul li {\\n  margin: 0;\\n  padding: 0;\\n  list-style: none; }\\n/* リンクの装飾を無効化 */\\na {\\n  text-decoration: none;\\n  color: #000000; }\\n/* 画面全体 */\\nhtml {\\n  height: 100%; }\\n/* 共通フォント */\\nbody {\\n  height: 100%;\\n  font-family: NotoSansCJKjp, メイリオ, Meiryo, Osaka, 'ＭＳ Ｐゴシック', 'MS PGothic', sans-serif; }\\n/* タイトル用独自定義フォント */\\n@font-face {\\n  font-family: 'Product Sans';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local(\\\"Open Sans\\\"), local(\\\"OpenSans\\\"), url(https://fonts.gstatic.com/s/productsans/v5/HYvgU2fE2nRJvZ5JFAumwegdm0LZdjqr5-oayXSOefg.woff2) format(\\\"woff2\\\"); }\\n/* ----------------------\\n * 共通スタイル変数\\n * ----------------------*/\\n/* 背景色グレー1番 */\\n/* 背景色グレー2番 */\\n/* 背景色緑1番 */\\n/* 背景色緑2番 */\\n/* 背景色緑3番 */\\n/* 基本フォント色 */\\n/* 入力チェックエラー共通 */\\n.base-error-message-style {\\n  text-align: center;\\n  color: red; }\\n/* スタイルの変化仕様、ゆっくり */\\n.base-transition-ease, #task-manager-header-links li:hover {\\n  -webkit-transition-property: all;\\n  transition-property: all;\\n  -webkit-transition-duration: 300ms;\\n          transition-duration: 300ms;\\n  -webkit-transition-timing-function: ease;\\n          transition-timing-function: ease;\\n  -webkit-transition-delay: 0;\\n          transition-delay: 0; }\\n/* 登録ボタン共通仕様。幅は利用箇所で指定する */\\n.common-button-submit {\\n  height: 40px;\\n  font-size: 18px;\\n  letter-spacing: normal;\\n  text-align: center;\\n  color: #000;\\n  background-color: #00b686; }\\n/* ----------------------\\n * ヘッダーナビゲーション\\n * ----------------------/\\n/* ヘッダータイトル行 */\\n#task-manager-common-header {\\n  width: 100%;\\n  height: 70px;\\n  background-color: #1ef5bf;\\n  padding: 0px;\\n  margin: 0px;\\n  border-bottom: 1px solid #bdbdbd; }\\n#task-manager-common-header a {\\n    font-family: Product Sans;\\n    font-size: 60px; }\\n/* 共通ヘッダー（リンクナビゲーション） */\\n#task-manager-header-links {\\n  width: 100%;\\n  height: 50px;\\n  background-color: #1ef5bf;\\n  padding: 0px;\\n  margin: 0;\\n  text-align: right; }\\n#task-manager-header-links ul {\\n    display: inline-block;\\n    padding: 0;\\n    margin: 5px; }\\n#task-manager-header-links li {\\n    display: inline-block;\\n    font-size: 20px;\\n    border: 1px solid #bdbdbd;\\n    border-radius: 3px; }\\n#task-manager-header-links li:hover {\\n    background-color: #bdbdbd; }\\n/* ----------------------\\n * 使い回しパーツ\\n * ----------------------/\\n\\n/* マージン */\\n.mt-50 {\\n  margin-top: 50px; }\\n.mt-20-centered {\\n  margin: 20px 0 0 0; }\\n.mt-50-centered {\\n  margin: 50px 0 0 0; }\\n.mt-20 {\\n  margin-top: 20px; }\\n.mb-50 {\\n  margin-bottom: 50px; }\\n.ml-20 {\\n  margin-left: 20px; }\\n/* パディング */\\n.pt-50 {\\n  padding-top: 50px; }\\n.pt-50-centered {\\n  padding: 50px 0 0 0; }\\n.pt-20 {\\n  padding-top: 20px; }\\n.pr-20 {\\n  padding-right: 20px; }\\n.padding-leftright-10, #task-manager-common-header a, #task-manager-header-links li {\\n  padding: 0 10px 0 10px; }\\n.pl-20 {\\n  padding-left: 20px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.scss\n// module id = ./src/app/app.component.scss\n// module chunks = main","import { Component } from '@angular/core';\nimport { SignoutService } from './service/signout.service';\nimport { Router } from '@angular/router';\nimport { ServiceConst } from './const/service-const';\n\n/**\n * アプリケーションルートコンポーネントクラス。\n */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n    /**\n     * デフォルトコンストラクタ。\n     */\n    constructor(private signoutService: SignoutService, private router: Router) {}\n\n    public isSignedin(): boolean {\n        return this.signoutService.isSignedin();\n    }\n\n    /**\n     * ログアウトを実施して、トップページにリダイレクトします。\n     */\n    public signout(): void {\n        this.signoutService.signout();\n        this.router.navigateByUrl(ServiceConst.BASE_SLASH);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport { MatButtonModule, MatCheckboxModule, MatInputModule, MatIconModule, MatFormFieldModule, MatMenuModule  } from '@angular/material';\nimport { CookieService } from 'ngx-cookie-service';\n\nimport { AppComponent } from './app.component';\nimport { TaskComponent } from './component/task/task.component';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { WebModule } from './routes/web/web.module';\nimport { TaskService } from './service/task.service';\nimport { WebRoutingModule } from './routes/web/web-routing.module';\nimport { SignupComponent } from './component/user/signup/signup.component';\nimport { SignupService } from './service/signup.service';\nimport { CommonDeliveryService } from './service/common-delivery.service';\nimport { SigninComponent } from './component/user/signin/signin.component';\nimport { SigninService } from './service/signin.service';\nimport { TaskLabelService } from './service/task-label.service';\nimport { SignoutService } from './service/signout.service';\nimport { TasklabelComponent } from './component/tasklabel/tasklabel.component';\nimport { TasklineComponent } from './component/taskline/taskline.component';\nimport { IntroductionComponent } from './introduction/introduction/introduction.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TaskComponent,\n    SignupComponent,\n    SigninComponent,\n    TasklabelComponent,\n    TasklineComponent,\n    IntroductionComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    WebModule,\n    WebRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    MatButtonModule,\n    MatInputModule,\n    MatIconModule,\n    MatMenuModule,\n    MatFormFieldModule,\n    MatCheckboxModule\n  ],\n  providers: [ \n    TaskService,\n    TaskLabelService,\n    SignupService,\n    SigninService,\n    SignoutService,\n    CommonDeliveryService,\n    CookieService\n    // ,\n    // {\n    //   provide: HTTP_INTERCEPTORS,\n    //   useClass: XhrGlobalInterceptor, \n    //   multi: true\n    // }\n   ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","/**\n * task-manager-appのコード定義クラスです.\n */\nexport module TaskManagerCode {\n\n   //----------------------------\n   // タスクコード定義\n   //----------------------------\n    /** \n     * タスク完了フラグ：0, 登録済み\n     */\n    export const TASK_COMPLETED_FLAG_REGISTED = \"0\";\n    \n    /**\n     * タスク完了フラグ：1, 完了\n     */\n    export const TASK_COMPLETED_FLAG_COMPLETED = \"1\";\n    \n    /**\n     * タスク完了フラグ：2, 削除済み\n     */\n    export const TASK_COMPLETED_FLAG_DELETED = \"2\";\n\n    /**\n     * タスクラベル利用フラグ：0、登録\n     */\n    export const TASK_LABEL_REGISTRED = \"0\";\n\n    /**\n     * タスクラベル利用フラグ：1、削除済み\n     */\n    export const TASK_LABEL_DELETED = \"1\";\n\n    //----------------------------\n    // 利用者コード定義\n    //----------------------------\n    /**\n     * 利用者利用フラグ：0, 利用中\n     */\n    export const USER_USED_FLAG_USED = \"0\";\n\n    /**\n     * 利用者利用フラグ：1,退会済み\n     */\n    export const USER_USED_FLAG_DELETED = \"1\";\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/codedef/task-manager-code.ts","module.exports = \"<!-- タスクリスト -->\\n<div id=\\\"task-manager-task-container\\\">\\n    <!-- タグコンテナ -->\\n    <app-tasklabel></app-tasklabel>\\n\\n    <!-- タスクカードコンテナスペース -->\\n    <div id=\\\"task-manager-task-card-container-space\\\" class=\\\"mt-50\\\">\\n        <!-- 切り替えswitch -->\\n        <div id=\\\"task-manager-task-switch-box\\\">\\n            <div class=\\\"task-manager-task-switch-item\\\">\\n                <a routerLink=\\\"/task\\\">\\n                    <img src=\\\"../../../assets/images/list-ul-solid.svg\\\" alt=\\\"task-switch-item-list\\\">\\n                </a>\\n            </div>\\n            <div class=\\\"task-manager-task-switch-item\\\">\\n                <a routerLink=\\\"/task/timeline\\\">\\n                    <img src=\\\"../../../assets/images/chart-bar-regular.svg\\\" alt=\\\"task-switch-item-list\\\">\\n                </a>\\n            </div>\\n        </div>\\n            \\n        <!-- タスクカード -->\\n        <div id=\\\"task-manager-task-cards\\\">\\n            <ul>\\n                <li *ngFor=\\\"let task of this.commonDeliveryService.userTasks\\\">\\n                    <!-- 完了ボタン -->\\n                    <button class=\\\"task-manager-task-cards-complete\\\" (click)=\\\"complete(task.taskId)\\\" ></button>\\n                    <p class=\\\"task-manager-task-cards-title\\\"> {{ task.taskTitle }} </p>\\n                    <p class=\\\"task-manager-task-cards-period\\\"> {{ task.startDate }} ~ {{ task.deadline }} </p>\\n                    <p class=\\\"task-manager-task-cards-label\\\"> {{ task.taskLabel }} </p>\\n                    <p> {{ task.taskNote }} </p>        \\n                </li>\\n                <li>\\n                    <!-- タスク登録フォームコンテナ -->\\n                    <form id=\\\"task-manager-task-form-container\\\" [formGroup]=\\\"taskForm\\\">\\n                        <input class=\\\"task-manager-task-cards-title\\\" formControlName=\\\"taskTitleControl\\\" type=\\\"text\\\" name=\\\"taskTitle\\\" placeholder=\\\"タスクを入力 ...\\\" >\\n                        <select class=\\\"task-manager-task-cards-label\\\" formControlName=\\\"taskLabelControl\\\">\\n                            <option value='' disabled selected style='display:none;'>\\n                                ラベルを選択\\n                            </option>\\n                            <option></option>\\n                            <option *ngFor=\\\"let labelItem of this.commonDeliveryService.userLabels\\\" [value]=\\\"labelItem.taskLabel\\\" name=\\\"taskLabel\\\">\\n                                {{ labelItem.taskLabel }}\\n                            </option>\\n                        </select>\\n                        <input formControlName=\\\"startDateControl\\\" type=\\\"date\\\" name=\\\"startDate\\\" placeholder=\\\"開始日\\\">\\n                         - \\n                        <input formControlName=\\\"deadlineControl\\\" type=\\\"date\\\" name=\\\"deadline\\\" placeholder=\\\"終了日を入力\\\">\\n                        <input class=\\\"task-manager-task-cards-note\\\" formControlName=\\\"taskNoteControl\\\" type=\\\"text\\\" name=\\\"taskNote\\\" placeholder=\\\"メモ\\\">\\n                    </form>\\n            </ul>\\n            <!-- 登録ボタン -->\\n            <button id=\\\"task-manager-task-submit-button\\\" class=\\\"mt-20\\\" (click)=\\\"registTask()\\\" [disabled]=\\\"\\\">タスクを追加</button>\\n        </div>\\n        <!-- 入力チェックエラー表示 -->\\n        <div *ngIf=\\\"violateRistriction()\\\" class=\\\"base-error-message-style\\\"> {{ checkedResult }} </div>\\n    </div>\\n\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/component/task/task.component.html\n// module id = ./src/app/component/task/task.component.html\n// module chunks = main","module.exports = \"@charset \\\"UTF-8\\\";\\n/* ----------------------\\n * 共通スタイル変数\\n * ----------------------*/\\n/* 背景色グレー1番 */\\n/* 背景色グレー2番 */\\n/* 背景色緑1番 */\\n/* 背景色緑2番 */\\n/* 背景色緑3番 */\\n/* 基本フォント色 */\\n/* 入力チェックエラー共通 */\\n.base-error-message-style {\\n  margin: 20px 20px;\\n  text-align: center;\\n  color: red; }\\n/* ----------------------\\n * 共通\\n ----------------------*/\\n/* 枠線反映しない */\\ninput, button {\\n  border-style: none;\\n  border-radius: 5px; }\\n/* リスト表示しない */\\nul li {\\n  margin: 0;\\n  padding: 0;\\n  list-style: none; }\\n/* リンクの装飾を無効化 */\\na {\\n  text-decoration: none;\\n  color: #000000; }\\n/* 画面全体 */\\nhtml {\\n  height: 100%; }\\n/* 共通フォント */\\nbody {\\n  height: 100%;\\n  font-family: NotoSansCJKjp, メイリオ, Meiryo, Osaka, 'ＭＳ Ｐゴシック', 'MS PGothic', sans-serif; }\\n/* タイトル用独自定義フォント */\\n@font-face {\\n  font-family: 'Product Sans';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local(\\\"Open Sans\\\"), local(\\\"OpenSans\\\"), url(https://fonts.gstatic.com/s/productsans/v5/HYvgU2fE2nRJvZ5JFAumwegdm0LZdjqr5-oayXSOefg.woff2) format(\\\"woff2\\\"); }\\n/* ----------------------\\n * 共通スタイル変数\\n * ----------------------*/\\n/* 背景色グレー1番 */\\n/* 背景色グレー2番 */\\n/* 背景色緑1番 */\\n/* 背景色緑2番 */\\n/* 背景色緑3番 */\\n/* 基本フォント色 */\\n/* 入力チェックエラー共通 */\\n.base-error-message-style {\\n  text-align: center;\\n  color: red; }\\n/* スタイルの変化仕様、ゆっくり */\\n.base-transition-ease, #task-manager-header-links li:hover, .task-manager-task-switch-item, .task-manager-task-switch-item:hover, .task-manager-task-cards-complete {\\n  -webkit-transition-property: all;\\n  transition-property: all;\\n  -webkit-transition-duration: 300ms;\\n          transition-duration: 300ms;\\n  -webkit-transition-timing-function: ease;\\n          transition-timing-function: ease;\\n  -webkit-transition-delay: 0;\\n          transition-delay: 0; }\\n/* 登録ボタン共通仕様。幅は利用箇所で指定する */\\n.common-button-submit, #task-manager-task-submit-button {\\n  height: 40px;\\n  font-size: 18px;\\n  letter-spacing: normal;\\n  text-align: center;\\n  color: #000;\\n  background-color: #00b686; }\\n/* ----------------------\\n * ヘッダーナビゲーション\\n * ----------------------/\\n/* ヘッダータイトル行 */\\n#task-manager-common-header {\\n  width: 100%;\\n  height: 70px;\\n  background-color: #1ef5bf;\\n  padding: 0px;\\n  margin: 0px;\\n  border-bottom: 1px solid #bdbdbd; }\\n#task-manager-common-header a {\\n    font-family: Product Sans;\\n    font-size: 60px; }\\n/* 共通ヘッダー（リンクナビゲーション） */\\n#task-manager-header-links {\\n  width: 100%;\\n  height: 50px;\\n  background-color: #1ef5bf;\\n  padding: 0px;\\n  margin: 0;\\n  text-align: right; }\\n#task-manager-header-links ul {\\n    display: inline-block;\\n    padding: 0;\\n    margin: 5px; }\\n#task-manager-header-links li {\\n    display: inline-block;\\n    font-size: 20px;\\n    border: 1px solid #bdbdbd;\\n    border-radius: 3px; }\\n#task-manager-header-links li:hover {\\n    background-color: #bdbdbd; }\\n/* ----------------------\\n * 使い回しパーツ\\n * ----------------------/\\n\\n/* マージン */\\n.mt-50 {\\n  margin-top: 50px; }\\n.mt-20-centered {\\n  margin: 20px 0 0 0; }\\n.mt-50-centered {\\n  margin: 50px 0 0 0; }\\n.mt-20 {\\n  margin-top: 20px; }\\n.mb-50 {\\n  margin-bottom: 50px; }\\n.ml-20 {\\n  margin-left: 20px; }\\n/* パディング */\\n.pt-50 {\\n  padding-top: 50px; }\\n.pt-50-centered {\\n  padding: 50px 0 0 0; }\\n.pt-20 {\\n  padding-top: 20px; }\\n.pr-20 {\\n  padding-right: 20px; }\\n.padding-leftright-10, #task-manager-common-header a, #task-manager-header-links li {\\n  padding: 0 10px 0 10px; }\\n.pl-20 {\\n  padding-left: 20px; }\\n/* ----------------------\\n * 画面全体\\n * ----------------------*/\\n#task-manager-task-container {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex; }\\n/* ----------------------\\n * タスクカードコンテナ\\n * ----------------------*/\\n/* タスクカードコンテナスペース全体 */\\n#task-manager-task-card-container-space {\\n  -webkit-box-flex: 1;\\n      -ms-flex: 1;\\n          flex: 1;\\n  margin: 50px 50px; }\\n/* 表示切り替えswitch, flexboxの親要素にする */\\n#task-manager-task-switch-box {\\n  margin: 0 auto;\\n  padding: 0;\\n  height: 40px;\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex; }\\n/* 切り替えswitchデフォルト */\\n.task-manager-task-switch-item, .task-manager-task-switch-item:hover {\\n  margin: 0 auto;\\n  padding: 0;\\n  -webkit-box-flex: 50%;\\n      -ms-flex: 50%;\\n          flex: 50%;\\n  text-align: center; }\\n.task-manager-task-switch-item img, .task-manager-task-switch-item:hover img {\\n    width: 30px;\\n    height: 30px; }\\n.task-manager-task-switch-item:hover {\\n    border-bottom: 1px solid #1ef5bf; }\\n/* ----------------------\\n * タスクカード\\n * ----------------------*/\\n/* カード本体 */\\n#task-manager-task-cards ul {\\n  margin: 0 auto;\\n  padding: 0; }\\n#task-manager-task-cards li {\\n  margin-top: 20px;\\n  height: 50px;\\n  background-color: #ffffff;\\n  border-bottom: 1px solid  #bdbdbd; }\\n#task-manager-task-cards li > * {\\n  height: 20px;\\n  margin: 0;\\n  display: inline-block; }\\n/* タスク完了ボタンのスタイル、デフォルト */\\n.task-manager-task-cards-complete {\\n  width: 30px;\\n  height: 30px;\\n  background-color: #bdbdbd; }\\n.task-manager-task-cards-complete:hover {\\n    width: 30px;\\n    height: 30px;\\n    background-color: #fafafa; }\\n.task-manager-task-cards-title {\\n  width: 500px;\\n  font-size: 20px;\\n  letter-spacing: normal;\\n  color: #000000; }\\n.task-manager-task-cards-label {\\n  width: 200px;\\n  border-radius: 10px;\\n  background-color: #6effe8;\\n  font-size: 14px;\\n  letter-spacing: normal;\\n  color: #000000;\\n  text-align: center; }\\n.task-manager-task-cards-period {\\n  width: 220px; }\\n.task-manager-task-cards-note {\\n  width: 300px;\\n  font-size: 16px;\\n  letter-spacing: normal;\\n  color: #bdbdbd; }\\n/* タスク登録ボタン */\\n#task-manager-task-submit-button {\\n  width: 100%; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/component/task/task.component.scss\n// module id = ./src/app/component/task/task.component.scss\n// module chunks = main","import { Component, OnInit } from '@angular/core';\nimport { TaskService } from '../../service/task.service';\nimport { FetchTaskResponseDto } from '../../dto/interface/fetch-task-response';\nimport { Task } from '../../entity/task';\nimport { RegistTaskRequest } from '../../dto/interface/regist-task-request';\nimport { FormGroup, Validators, FormControl, AbstractControl } from '@angular/forms';\nimport { AppConst } from '../../const/app.const';\nimport { ObjectUtil } from '../../util/object.util';\nimport { TaskCompleteRequestDto } from '../../dto/interface/task-complete-request.dto';\nimport { TaskCompleteResponseDto } from '../../dto/interface/task-complete-response.dto';\nimport { _ } from 'underscore';\nimport { CommonDeliveryService } from '../../service/common-delivery.service';\nimport { Router } from '@angular/router';\nimport { ServiceConst } from '../../const/service-const';\nimport { RegistTaskResponse } from '../../dto/interface/regist-task-response';\nimport { DateUtil } from '../../util/date-util';\n\n/**\n * タスクの業務処理コンポーネント\n */\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.scss']\n})\nexport class TaskComponent implements OnInit {\n\n    /** \n     * デフォルトコンストラクタ\n     */\n    constructor(private taskService: TaskService, private router: Router, private commonDeliveryService: CommonDeliveryService) {}\n\n    /**\n     * 利用者ID\n     */ \n    public userId: string;\n\n    /**\n     * コンポーネント初期化時の起動処理\n    */\n    ngOnInit() {\n        // リダイレクトされたときに、別のコンポーネントから動的に利用者IDを受け取ります。\n        this.commonDeliveryService.observableUserId.subscribe((userId: string) => {\n            this.userId = userId;\n        });\n\n        // 利用者IDが正常に設定されていない場合、リダイレクトしてアクセスを拒否する\n        if (ObjectUtil.isNullOrUndefined(this.userId)) {\n            this.router.navigateByUrl(ServiceConst.BASE_SLASH + ServiceConst.URL_WEB_USER_SIGNIN);\n        }\n        \n        // タスクのリストをプロパティに設定\n        this.fetchTasks(this.userId);\n        this.checkedResult = \"\";\n    }\n\n    /**\n     * タスクリスト \n     */ \n    public tasks: Task[] = [];\n\n    /**\n     * タスク登録のフォームグループ\n     */\n    public taskForm: FormGroup = new FormGroup({\n        taskTitleControl: new FormControl(null, [Validators.required, Validators.maxLength(AppConst.TASK_TITLE_MAX_LENGTH)]),\n        taskLabelControl: new FormControl(\"\"),\n        startDateControl: new FormControl(null),\n        deadlineControl: new FormControl(null),\n        taskNoteControl: new FormControl(\"\", Validators.maxLength(AppConst.TASK_NOTE_MAX_LENGTH))\n    });\n\n    /** \n     * タスクチェック結果\n     */\n    public checkedResult: string;\n\n    /**\n     * サービスクラスから、タスクの一覧を取得します.\n     * @param userId: string\n    */\n    public fetchTasks(userId: string): void {\n        this.taskService.fetchTask(userId).subscribe((res: FetchTaskResponseDto) => this.commonDeliveryService.userTasks = res.tasks);\n    }\n\n    /**\n     * テンプレートから受け取ったタスクを登録します.\n     * @param registTaskRequestDto: RegistTaskRequest\n     * @returns void\n    */\n    public registTask(): void {\n        // 入力チェックを違反していない場合、タスク登録処理を実行します\n        if (this.isNotNull() && !this.violateRistriction()) {\n            var registTaskRequestDto: RegistTaskRequest = new RegistTaskRequest();\n            // 登録リクエストDTOの生成\n            registTaskRequestDto.setTaskTitle(this.taskForm.get(\"taskTitleControl\").value);\n            this.taskForm.get(\"taskLabelControl\").value != \"\" ? registTaskRequestDto.setTaskLabel(this.taskForm.get(\"taskLabelControl\").value)\n                : registTaskRequestDto.setTaskLabel(null)\n            // registTaskRequestDto.setTaskLabel(this.taskForm.get(\"taskLabelControl\").value);\n            if (ObjectUtil.isNullOrUndefined(this.taskForm.get(\"startDateControl\").value)) {\n                registTaskRequestDto.setStartDate(DateUtil.formatDateYMDWithSlash(new Date()));\n            } else { \n                registTaskRequestDto.setStartDate(this.taskForm.get(\"startDateControl\").value);\n            }\n            registTaskRequestDto.setDeadline(this.taskForm.get(\"deadlineControl\").value);\n            registTaskRequestDto.setTaskNote(this.taskForm.get(\"taskNoteControl\").value);\n            // registTaskRequestDto.setCompletedFlag(TaskManagerCode.TASK_COMPLETED_FLAG_REGISTED);\n            registTaskRequestDto.setUserId(this.userId);\n\n            // サービスクラスを実行します。\n            this.taskService.registTask(registTaskRequestDto).subscribe((res: RegistTaskResponse) => {\n                console.log(JSON.stringify(res));\n            });\n\n            // 登録したタスクをリストに追加して、随時表を更新します。\n            var newTask: Task = new Task();\n            newTask.setTaskTitle(registTaskRequestDto.getTaskTitle());\n            newTask.setTaskLabel(registTaskRequestDto.getTaskLabel());\n            newTask.setTaskNote(registTaskRequestDto.getTaskNote());\n            newTask.setStartDate(registTaskRequestDto.getStartDate());\n            newTask.setDeadline(registTaskRequestDto.getDeadline());\n            this.commonDeliveryService.userTasks.push(newTask);\n        }\n    }\n\n    /**\n     * 入力必須項目に値が入っていることを確認します。\n     * @returns boolean\n     */\n    private isNotNull(): boolean {\n        if(ObjectUtil.isNullOrUndefined(this.taskForm.get(\"taskTitleControl\").value)){\n            this.checkedResult = AppConst.TASK_TITLE_REQUIRED_VIOLATED;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 入力チェックに適合していることをチェックします。\n     * @returns boolean\n     */\n    public violateRistriction(): boolean {\n        // タスクタイトル。必須入力チェック\n        var taskTitle: AbstractControl = this.taskForm.get(\"taskTitleControl\");\n        if (ObjectUtil.isNullOrUndefined(this.taskForm.get(\"taskTitleControl\").value) && taskTitle.hasError('required') && (taskTitle.dirty || taskTitle.touched)) {\n            this.checkedResult = AppConst.TASK_TITLE_REQUIRED_VIOLATED;\n            return true;\n        }\n\n        if (taskTitle.hasError('maxlength') && (taskTitle.dirty || taskTitle.touched)) {\n            this.checkedResult = AppConst.TASK_TITLE_LENGTH_VIOLATED;\n            return true;\n        }\n\n        // タスクメモ。200文字以内であることをチェックする\n        var note: AbstractControl = this.taskForm.get(\"taskNoteControl\");\n        if (note.hasError('maxlength') && (note.dirty || note.touched)) {\n            this.checkedResult =  AppConst.TASK_NOTE_LENGTH_VIOLATED;\n            return true;\n        }\n\n        // 終了日。開始日との関係が正常であることを確認する\n        var deadline: string = this.taskForm.get(\"deadlineControl\").value;\n        var startdate: string = this.taskForm.get(\"startDateControl\").value;\n        if(!ObjectUtil.isNullOrUndefined(deadline) && DateUtil.isForwardFromComparison(deadline, startdate)) {\n            this.checkedResult = AppConst.DEADLINE_SET_BEFORE_START_DATE;\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * タスクを完了します。\n     * @param taskId: string\n     * @returns void\n     */\n    public complete(taskId: string): void {\n        // リクエストDTOの初期化\n        var taskCompleteRequestDto: TaskCompleteRequestDto = new TaskCompleteRequestDto();\n        taskCompleteRequestDto.setTaskId(taskId);\n\n        // サービスクラスの実行。レスポンスが帰ってきてたら、タスクのリストから削除。\n        this.taskService.complete(taskCompleteRequestDto).subscribe((res: TaskCompleteResponseDto) => {\n            if (!ObjectUtil.isNullOrUndefined(res.taskId)) {\n                  // 完了したタスクを抽出\n                  var completedTask: Task = _.where(this.commonDeliveryService.userTasks, {taskId : res.taskId});\n                  // 完了したタスクのINDEXを取得\n                  var index: number = _.indexOf(this.commonDeliveryService.userTasks, completedTask);\n                  // タスクのリストから削除\n                  this.commonDeliveryService.userTasks.splice(index, 1);\n            }\n        });\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/component/task/task.component.ts","module.exports = \"<!-- タグコンテナ -->\\n<div id=\\\"task-manager-task-label-container\\\">\\n    <ul>\\n        <li (click)=\\\"filterTasks($event, null)\\\">\\n            すべて\\n        </li>\\n        <!-- <li *ngFor=\\\"let labelItem of labels\\\" class=\\\"pt-20\\\"> -->\\n        <li *ngFor=\\\"let labelItem of this.commonDeliveryService.userLabels\\\" class=\\\"pt-20\\\" (click)=\\\"filterTasks($event, labelItem)\\\">\\n            {{ labelItem.taskLabel }}\\n        </li>\\n    </ul>\\n\\n    <!-- タグ登録フォームコンテナ -->\\n    <form [formGroup]=\\\"taskLabelForm\\\" id=\\\"task-manager-task-label-form-container\\\">\\n        <input formControlName=\\\"taskLabelControl\\\" type=\\\"text\\\" name=\\\"taskLabel\\\" placeholder=\\\"タグを入力\\\" >\\n        <button class=\\\"mt-20\\\" (click)=\\\"registerLabel()\\\" [disabled]=\\\"\\\">タグを追加</button>\\n        <!-- 入力チェックエラー表示 -->\\n        <div *ngIf=\\\"violateRistriction()\\\" id=\\\"task-manager-task-label-error\\\">\\n            <p>\\n                {{ labelCheckedResult }}\\n            </p>\\n      </div>\\n    </form>    \\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/component/tasklabel/tasklabel.component.html\n// module id = ./src/app/component/tasklabel/tasklabel.component.html\n// module chunks = main","module.exports = \"@charset \\\"UTF-8\\\";\\n/* ----------------------\\n * 共通スタイル変数\\n * ----------------------*/\\n/* 背景色グレー1番 */\\n/* 背景色グレー2番 */\\n/* 背景色緑1番 */\\n/* 背景色緑2番 */\\n/* 背景色緑3番 */\\n/* 基本フォント色 */\\n/* 入力チェックエラー共通 */\\n.base-error-message-style, #task-manager-task-label-error {\\n  margin: 20px 20px;\\n  text-align: center;\\n  color: red; }\\n/* ----------------------\\n * 共通\\n ----------------------*/\\n/* 枠線反映しない */\\ninput, button {\\n  border-style: none;\\n  border-radius: 5px; }\\n/* リスト表示しない */\\nul li {\\n  margin: 0;\\n  padding: 0;\\n  list-style: none; }\\n/* リンクの装飾を無効化 */\\na {\\n  text-decoration: none;\\n  color: #000000; }\\n/* 画面全体 */\\nhtml {\\n  height: 100%; }\\n/* 共通フォント */\\nbody {\\n  height: 100%;\\n  font-family: NotoSansCJKjp, メイリオ, Meiryo, Osaka, 'ＭＳ Ｐゴシック', 'MS PGothic', sans-serif; }\\n/* タイトル用独自定義フォント */\\n@font-face {\\n  font-family: 'Product Sans';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local(\\\"Open Sans\\\"), local(\\\"OpenSans\\\"), url(https://fonts.gstatic.com/s/productsans/v5/HYvgU2fE2nRJvZ5JFAumwegdm0LZdjqr5-oayXSOefg.woff2) format(\\\"woff2\\\"); }\\n/* ----------------------\\n * 共通スタイル変数\\n * ----------------------*/\\n/* 背景色グレー1番 */\\n/* 背景色グレー2番 */\\n/* 背景色緑1番 */\\n/* 背景色緑2番 */\\n/* 背景色緑3番 */\\n/* 基本フォント色 */\\n/* 入力チェックエラー共通 */\\n.base-error-message-style, #task-manager-task-label-error {\\n  text-align: center;\\n  color: red; }\\n/* スタイルの変化仕様、ゆっくり */\\n.base-transition-ease, #task-manager-header-links li:hover {\\n  -webkit-transition-property: all;\\n  transition-property: all;\\n  -webkit-transition-duration: 300ms;\\n          transition-duration: 300ms;\\n  -webkit-transition-timing-function: ease;\\n          transition-timing-function: ease;\\n  -webkit-transition-delay: 0;\\n          transition-delay: 0; }\\n/* 登録ボタン共通仕様。幅は利用箇所で指定する */\\n.common-button-submit, #task-manager-task-label-form-container button {\\n  height: 40px;\\n  font-size: 18px;\\n  letter-spacing: normal;\\n  text-align: center;\\n  color: #000;\\n  background-color: #00b686; }\\n/* ----------------------\\n * ヘッダーナビゲーション\\n * ----------------------/\\n/* ヘッダータイトル行 */\\n#task-manager-common-header {\\n  width: 100%;\\n  height: 70px;\\n  background-color: #1ef5bf;\\n  padding: 0px;\\n  margin: 0px;\\n  border-bottom: 1px solid #bdbdbd; }\\n#task-manager-common-header a {\\n    font-family: Product Sans;\\n    font-size: 60px; }\\n/* 共通ヘッダー（リンクナビゲーション） */\\n#task-manager-header-links {\\n  width: 100%;\\n  height: 50px;\\n  background-color: #1ef5bf;\\n  padding: 0px;\\n  margin: 0;\\n  text-align: right; }\\n#task-manager-header-links ul {\\n    display: inline-block;\\n    padding: 0;\\n    margin: 5px; }\\n#task-manager-header-links li {\\n    display: inline-block;\\n    font-size: 20px;\\n    border: 1px solid #bdbdbd;\\n    border-radius: 3px; }\\n#task-manager-header-links li:hover {\\n    background-color: #bdbdbd; }\\n/* ----------------------\\n * 使い回しパーツ\\n * ----------------------/\\n\\n/* マージン */\\n.mt-50 {\\n  margin-top: 50px; }\\n.mt-20-centered, #task-manager-task-label-form-container button {\\n  margin: 20px 0 0 0; }\\n.mt-50-centered {\\n  margin: 50px 0 0 0; }\\n.mt-20 {\\n  margin-top: 20px; }\\n.mb-50 {\\n  margin-bottom: 50px; }\\n.ml-20 {\\n  margin-left: 20px; }\\n/* パディング */\\n.pt-50 {\\n  padding-top: 50px; }\\n.pt-50-centered, #task-manager-task-label-container ul {\\n  padding: 50px 0 0 0; }\\n.pt-20 {\\n  padding-top: 20px; }\\n.pr-20 {\\n  padding-right: 20px; }\\n.padding-leftright-10, #task-manager-common-header a, #task-manager-header-links li {\\n  padding: 0 10px 0 10px; }\\n.pl-20 {\\n  padding-left: 20px; }\\n/* ----------------------\\n * タグコンテナ\\n * ----------------------*/\\n#task-manager-task-label-container {\\n  width: 250px;\\n  height: 100vh;\\n  background-color: #fafafa;\\n  text-align: center; }\\n#task-manager-task-label-container ul {\\n    height: 430px;\\n    padding: 0;\\n    overflow: auto;\\n    margin: 0 auto; }\\n#task-manager-task-label-container ul li {\\n    margin: 0 auto;\\n    padding: 10px 0;\\n    text-align: center; }\\n#task-manager-task-label-container li:hover {\\n    background-color: #bdbdbd; }\\n/* タグ登録フォーム */\\n#task-manager-task-label-form-container {\\n  border-top: #bdbdbd;\\n  width: 100%;\\n  text-align: center; }\\n#task-manager-task-label-form-container input {\\n    width: 200px;\\n    height: 40px;\\n    font-size: 18px;\\n    letter-spacing: normal;\\n    display: inline-block;\\n    text-align: center;\\n    color: #bdbdbd;\\n    background-color: #fafafa; }\\n#task-manager-task-label-form-container button {\\n    width: 200px; }\\n/* エラー表示 */\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/component/tasklabel/tasklabel.component.scss\n// module id = ./src/app/component/tasklabel/tasklabel.component.scss\n// module chunks = main","import { Component, OnInit } from '@angular/core';\nimport { CommonDeliveryService } from '../../service/common-delivery.service';\nimport { TaskLabelService } from '../../service/task-label.service';\nimport { TaskLabel } from '../../entity/task-label';\nimport { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\nimport { AppConst } from '../../const/app.const';\nimport { TaskLabelRegisterRequestDto } from '../../dto/interface/task-label-register-request.dto';\nimport { TaskManagerCode } from '../../codedef/task-manager-code';\nimport { TaskLabelRegisterResponseDto } from '../../dto/interface/task-label-register-response.dto';\nimport { TaskLabelFetchResponseDto } from '../../dto/interface/task-label-fetch-response.dto';\nimport { _ } from 'underscore';\nimport { Task } from '../../entity/task';\nimport { TaskService } from '../../service/task.service';\nimport { FetchTaskResponseDto } from '../../dto/interface/fetch-task-response';\nimport { ObjectUtil } from '../../util/object.util';\n\n/**\n * タスクラベル処理コンポーネント\n */\n@Component({\n  selector: 'app-tasklabel',\n  templateUrl: './tasklabel.component.html',\n  styleUrls: ['./tasklabel.component.scss']\n})\nexport class TasklabelComponent implements OnInit {\n\n    /**\n     * デフォルトコンストラクタ\n     */\n    constructor(private commonDeliveryService: CommonDeliveryService, private taskLabelService: TaskLabelService, private taskService: TaskService) { }\n\n    /**\n     * 利用者ID\n     */ \n    public userId: string;\n\n    /**\n     * ラベルチェック結果\n     */\n    public labelCheckedResult: string = null;\n\n    /**\n     * タスクラベルリスト\n     */\n    public labels: TaskLabel[] = [];\n\n    /**\n     * タスクリスト、コンポーネント内でのタスクのマスタリスト\n     */\n    public tasks: Task[] = [];\n\n    ngOnInit() {\n        // サインイン時のIDを引き受ける\n        this.commonDeliveryService.observableUserId.subscribe((userId: string) => {\n          this.userId = userId;\n        });\n\n        // タスクラベルのリストをプロパティに設定\n        this.fetchLabels(this.userId);\n\n        // タスクのリストをプロパティに指定\n        this.fetchTasks(this.userId);\n    }\n\n    /**\n     * タスクラベル登録フォームグループ\n     */\n    public taskLabelForm: FormGroup = new FormGroup({\n        taskLabelControl: new FormControl(null, [Validators.required, Validators.maxLength(AppConst.TASK_LABEL_MAX_LENGTH)])\n    });\n\n    /**\n     * 利用者の保持するタスクラベルのリストを取得します。\n     * @param userId: string 利用者ID\n     */\n    public fetchLabels(userId: string): void {\n        this.taskLabelService.fetch(userId).subscribe((res: TaskLabelFetchResponseDto) => {\n            // 共通データ授受サービス内の配列に格納しておく\n            this.commonDeliveryService.userLabels = res.labels;\n        });\n    }\n\n    /**\n     * サービスクラスから、タスクの一覧を取得します.\n     * @param userId: string\n     */\n    public fetchTasks(userId: string): void {\n        this.taskService.fetchTask(userId).subscribe((res: FetchTaskResponseDto) => this.tasks = res.tasks);\n    }\n\n    /**\n     * ラベルを新規登録します。\n     */\n    public registerLabel(): void {\n        // リクエストオブジェクトを初期化\n        var req: TaskLabelRegisterRequestDto = new TaskLabelRegisterRequestDto();\n        req.taskLabel = this.taskLabelForm.get(\"taskLabelControl\").value;\n        req.usedFlag = TaskManagerCode.TASK_LABEL_REGISTRED;\n        req.userId = this.userId;\n\n        // 正常に登録できたら、リストに追加する\n        this.taskLabelService.registerLabel(req).subscribe((res: TaskLabelRegisterResponseDto) => {\n            var label: TaskLabel = new TaskLabel();\n            label.labelId = res.labelId;\n            label.taskLabel = res.taskLabel;\n            label.usedFlag = TaskManagerCode.TASK_LABEL_REGISTRED;\n            label.userId = this.userId;\n            this.commonDeliveryService.userLabels.push(label);\n        });\n    }\n\n    /**\n     * 入力チェックに適合していることをチェックします。\n     * @returns boolean\n     */\n    public violateRistriction(): boolean {\n        // 20桁以内であることをチェックする、ラベルの最大文字列は登録段階でのみ弾く\n        var label: AbstractControl = this.taskLabelForm.get(\"taskLabelControl\");\n        if (label.hasError('required') && (label.dirty || label.touched)) {\n            this.labelCheckedResult =  AppConst.TASK_LABEL_REQUIRED_VIOLATED;\n            return true;\n        } else if (label.hasError('maxlength') && (label.dirty || label.touched)) {\n            this.labelCheckedResult =  AppConst.TASK_LABEL_LENGTH_VIOLATED;\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * ラベルでタスクをフィルターします。\n     */\n    public filterTasks(event, labelItem: TaskLabel | null): void {\n        // nullを渡されたらリストを初期化する\n        if(ObjectUtil.isNullOrUndefined(labelItem)) { \n            this.commonDeliveryService.userTasks = this.tasks;\n        } else {\n            // 画面から受け取ったラベルに合致するタスクのリストを生成する\n            this.commonDeliveryService.userTasks = _.filter(this.tasks, (task: Task) => task.taskLabel === labelItem.taskLabel);\n        }\n\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/component/tasklabel/tasklabel.component.ts","module.exports = \"<div id=\\\"task-manager-taskline-container\\\">\\n    <!-- タグコンテナ -->\\n    <app-tasklabel></app-tasklabel>\\n\\n    <!-- タスクカードコンテナスペース -->\\n    <div id=\\\"task-manager-task-timeline-container-space\\\" class=\\\"mt-50\\\">\\n        <!-- 切り替えswitch -->\\n        <div id=\\\"task-manager-task-switch-box\\\">\\n            <div class=\\\"task-manager-task-switch-item\\\">\\n                <a routerLink=\\\"/task\\\">\\n                    <img src=\\\"../../../assets/images/list-ul-solid.svg\\\" alt=\\\"task-switch-item-list\\\">\\n                </a>\\n            </div>\\n            <div class=\\\"task-manager-task-switch-item\\\">\\n                <a routerLink=\\\"/task/timeline\\\">\\n                    <img src=\\\"../../../assets/images/chart-bar-regular.svg\\\" alt=\\\"task-switch-item-list\\\">\\n                </a>\\n            </div>\\n        </div>\\n\\n        <!-- プロジェクト別表示リスト -->\\n        <div id=\\\"task-manager-timeline-items\\\" *ngFor=\\\"let relation of relations\\\">\\n            <h1> {{ relation.taskLabel }} </h1>\\n            <!-- タスクごとに小さい表を繰り返し表示する -->\\n            <table *ngFor=\\\"let task of relation.tasks\\\">\\n                <thead>\\n                    <tr>\\n                        \\n                    </tr>\\n                </thead>\\n                <tbody>\\n                    <tr>\\n                        <td>\\n                            {{ task.taskTitle }}\\n                        </td>\\n                    </tr>\\n                </tbody>\\n            </table>\\n        </div>\\n    </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/component/taskline/taskline.component.html\n// module id = ./src/app/component/taskline/taskline.component.html\n// module chunks = main","module.exports = \"@charset \\\"UTF-8\\\";\\n/* ----------------------\\n * 共通スタイル変数\\n * ----------------------*/\\n/* 背景色グレー1番 */\\n/* 背景色グレー2番 */\\n/* 背景色緑1番 */\\n/* 背景色緑2番 */\\n/* 背景色緑3番 */\\n/* 基本フォント色 */\\n/* 入力チェックエラー共通 */\\n.base-error-message-style {\\n  margin: 20px 20px;\\n  text-align: center;\\n  color: red; }\\n/* ----------------------\\n * 共通\\n ----------------------*/\\n/* 枠線反映しない */\\ninput, button {\\n  border-style: none;\\n  border-radius: 5px; }\\n/* リスト表示しない */\\nul li {\\n  margin: 0;\\n  padding: 0;\\n  list-style: none; }\\n/* リンクの装飾を無効化 */\\na {\\n  text-decoration: none;\\n  color: #000000; }\\n/* 画面全体 */\\nhtml {\\n  height: 100%; }\\n/* 共通フォント */\\nbody {\\n  height: 100%;\\n  font-family: NotoSansCJKjp, メイリオ, Meiryo, Osaka, 'ＭＳ Ｐゴシック', 'MS PGothic', sans-serif; }\\n/* タイトル用独自定義フォント */\\n@font-face {\\n  font-family: 'Product Sans';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local(\\\"Open Sans\\\"), local(\\\"OpenSans\\\"), url(https://fonts.gstatic.com/s/productsans/v5/HYvgU2fE2nRJvZ5JFAumwegdm0LZdjqr5-oayXSOefg.woff2) format(\\\"woff2\\\"); }\\n/* ----------------------\\n * 共通スタイル変数\\n * ----------------------*/\\n/* 背景色グレー1番 */\\n/* 背景色グレー2番 */\\n/* 背景色緑1番 */\\n/* 背景色緑2番 */\\n/* 背景色緑3番 */\\n/* 基本フォント色 */\\n/* 入力チェックエラー共通 */\\n.base-error-message-style {\\n  text-align: center;\\n  color: red; }\\n/* スタイルの変化仕様、ゆっくり */\\n.base-transition-ease, #task-manager-header-links li:hover, .task-manager-task-switch-item, .task-manager-task-switch-item:hover, .task-manager-task-cards-complete {\\n  -webkit-transition-property: all;\\n  transition-property: all;\\n  -webkit-transition-duration: 300ms;\\n          transition-duration: 300ms;\\n  -webkit-transition-timing-function: ease;\\n          transition-timing-function: ease;\\n  -webkit-transition-delay: 0;\\n          transition-delay: 0; }\\n/* 登録ボタン共通仕様。幅は利用箇所で指定する */\\n.common-button-submit, #task-manager-task-submit-button {\\n  height: 40px;\\n  font-size: 18px;\\n  letter-spacing: normal;\\n  text-align: center;\\n  color: #000;\\n  background-color: #00b686; }\\n/* ----------------------\\n * ヘッダーナビゲーション\\n * ----------------------/\\n/* ヘッダータイトル行 */\\n#task-manager-common-header {\\n  width: 100%;\\n  height: 70px;\\n  background-color: #1ef5bf;\\n  padding: 0px;\\n  margin: 0px;\\n  border-bottom: 1px solid #bdbdbd; }\\n#task-manager-common-header a {\\n    font-family: Product Sans;\\n    font-size: 60px; }\\n/* 共通ヘッダー（リンクナビゲーション） */\\n#task-manager-header-links {\\n  width: 100%;\\n  height: 50px;\\n  background-color: #1ef5bf;\\n  padding: 0px;\\n  margin: 0;\\n  text-align: right; }\\n#task-manager-header-links ul {\\n    display: inline-block;\\n    padding: 0;\\n    margin: 5px; }\\n#task-manager-header-links li {\\n    display: inline-block;\\n    font-size: 20px;\\n    border: 1px solid #bdbdbd;\\n    border-radius: 3px; }\\n#task-manager-header-links li:hover {\\n    background-color: #bdbdbd; }\\n/* ----------------------\\n * 使い回しパーツ\\n * ----------------------/\\n\\n/* マージン */\\n.mt-50 {\\n  margin-top: 50px; }\\n.mt-20-centered {\\n  margin: 20px 0 0 0; }\\n.mt-50-centered {\\n  margin: 50px 0 0 0; }\\n.mt-20 {\\n  margin-top: 20px; }\\n.mb-50 {\\n  margin-bottom: 50px; }\\n.ml-20 {\\n  margin-left: 20px; }\\n/* パディング */\\n.pt-50 {\\n  padding-top: 50px; }\\n.pt-50-centered {\\n  padding: 50px 0 0 0; }\\n.pt-20 {\\n  padding-top: 20px; }\\n.pr-20 {\\n  padding-right: 20px; }\\n.padding-leftright-10, #task-manager-common-header a, #task-manager-header-links li {\\n  padding: 0 10px 0 10px; }\\n.pl-20 {\\n  padding-left: 20px; }\\n/* ----------------------\\n * 共通スタイル変数\\n * ----------------------*/\\n/* 背景色グレー1番 */\\n/* 背景色グレー2番 */\\n/* 背景色緑1番 */\\n/* 背景色緑2番 */\\n/* 背景色緑3番 */\\n/* 基本フォント色 */\\n/* 入力チェックエラー共通 */\\n.base-error-message-style {\\n  margin: 20px 20px;\\n  text-align: center;\\n  color: red; }\\n/* ----------------------\\n * 共通\\n ----------------------*/\\n/* 枠線反映しない */\\ninput, button {\\n  border-style: none;\\n  border-radius: 5px; }\\n/* リスト表示しない */\\nul li {\\n  margin: 0;\\n  padding: 0;\\n  list-style: none; }\\n/* リンクの装飾を無効化 */\\na {\\n  text-decoration: none;\\n  color: #000000; }\\n/* 画面全体 */\\nhtml {\\n  height: 100%; }\\n/* 共通フォント */\\nbody {\\n  height: 100%;\\n  font-family: NotoSansCJKjp, メイリオ, Meiryo, Osaka, 'ＭＳ Ｐゴシック', 'MS PGothic', sans-serif; }\\n/* タイトル用独自定義フォント */\\n@font-face {\\n  font-family: 'Product Sans';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local(\\\"Open Sans\\\"), local(\\\"OpenSans\\\"), url(https://fonts.gstatic.com/s/productsans/v5/HYvgU2fE2nRJvZ5JFAumwegdm0LZdjqr5-oayXSOefg.woff2) format(\\\"woff2\\\"); }\\n/* ----------------------\\n * 共通スタイル変数\\n * ----------------------*/\\n/* 背景色グレー1番 */\\n/* 背景色グレー2番 */\\n/* 背景色緑1番 */\\n/* 背景色緑2番 */\\n/* 背景色緑3番 */\\n/* 基本フォント色 */\\n/* 入力チェックエラー共通 */\\n.base-error-message-style {\\n  text-align: center;\\n  color: red; }\\n/* スタイルの変化仕様、ゆっくり */\\n.base-transition-ease, #task-manager-header-links li:hover, .task-manager-task-switch-item, .task-manager-task-switch-item:hover, .task-manager-task-cards-complete {\\n  -webkit-transition-property: all;\\n  transition-property: all;\\n  -webkit-transition-duration: 300ms;\\n          transition-duration: 300ms;\\n  -webkit-transition-timing-function: ease;\\n          transition-timing-function: ease;\\n  -webkit-transition-delay: 0;\\n          transition-delay: 0; }\\n/* 登録ボタン共通仕様。幅は利用箇所で指定する */\\n.common-button-submit, #task-manager-task-submit-button {\\n  height: 40px;\\n  font-size: 18px;\\n  letter-spacing: normal;\\n  text-align: center;\\n  color: #000;\\n  background-color: #00b686; }\\n/* ----------------------\\n * ヘッダーナビゲーション\\n * ----------------------/\\n/* ヘッダータイトル行 */\\n#task-manager-common-header {\\n  width: 100%;\\n  height: 70px;\\n  background-color: #1ef5bf;\\n  padding: 0px;\\n  margin: 0px;\\n  border-bottom: 1px solid #bdbdbd; }\\n#task-manager-common-header a {\\n    font-family: Product Sans;\\n    font-size: 60px; }\\n/* 共通ヘッダー（リンクナビゲーション） */\\n#task-manager-header-links {\\n  width: 100%;\\n  height: 50px;\\n  background-color: #1ef5bf;\\n  padding: 0px;\\n  margin: 0;\\n  text-align: right; }\\n#task-manager-header-links ul {\\n    display: inline-block;\\n    padding: 0;\\n    margin: 5px; }\\n#task-manager-header-links li {\\n    display: inline-block;\\n    font-size: 20px;\\n    border: 1px solid #bdbdbd;\\n    border-radius: 3px; }\\n#task-manager-header-links li:hover {\\n    background-color: #bdbdbd; }\\n/* ----------------------\\n * 使い回しパーツ\\n * ----------------------/\\n\\n/* マージン */\\n.mt-50 {\\n  margin-top: 50px; }\\n.mt-20-centered {\\n  margin: 20px 0 0 0; }\\n.mt-50-centered {\\n  margin: 50px 0 0 0; }\\n.mt-20 {\\n  margin-top: 20px; }\\n.mb-50 {\\n  margin-bottom: 50px; }\\n.ml-20 {\\n  margin-left: 20px; }\\n/* パディング */\\n.pt-50 {\\n  padding-top: 50px; }\\n.pt-50-centered {\\n  padding: 50px 0 0 0; }\\n.pt-20 {\\n  padding-top: 20px; }\\n.pr-20 {\\n  padding-right: 20px; }\\n.padding-leftright-10, #task-manager-common-header a, #task-manager-header-links li {\\n  padding: 0 10px 0 10px; }\\n.pl-20 {\\n  padding-left: 20px; }\\n/* ----------------------\\n * 画面全体\\n * ----------------------*/\\n#task-manager-task-container {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex; }\\n/* ----------------------\\n * タスクカードコンテナ\\n * ----------------------*/\\n/* タスクカードコンテナスペース全体 */\\n#task-manager-task-card-container-space {\\n  -webkit-box-flex: 1;\\n      -ms-flex: 1;\\n          flex: 1;\\n  margin: 50px 50px; }\\n/* 表示切り替えswitch, flexboxの親要素にする */\\n#task-manager-task-switch-box {\\n  margin: 0 auto;\\n  padding: 0;\\n  height: 40px;\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex; }\\n/* 切り替えswitchデフォルト */\\n.task-manager-task-switch-item, .task-manager-task-switch-item:hover {\\n  margin: 0 auto;\\n  padding: 0;\\n  -webkit-box-flex: 50%;\\n      -ms-flex: 50%;\\n          flex: 50%;\\n  text-align: center; }\\n.task-manager-task-switch-item img, .task-manager-task-switch-item:hover img {\\n    width: 30px;\\n    height: 30px; }\\n.task-manager-task-switch-item:hover {\\n    border-bottom: 1px solid #1ef5bf; }\\n/* ----------------------\\n * タスクカード\\n * ----------------------*/\\n/* カード本体 */\\n#task-manager-task-cards ul {\\n  margin: 0 auto;\\n  padding: 0; }\\n#task-manager-task-cards li {\\n  margin-top: 20px;\\n  height: 50px;\\n  background-color: #ffffff;\\n  border-bottom: 1px solid  #bdbdbd; }\\n#task-manager-task-cards li > * {\\n  height: 20px;\\n  margin: 0;\\n  display: inline-block; }\\n/* タスク完了ボタンのスタイル、デフォルト */\\n.task-manager-task-cards-complete {\\n  width: 30px;\\n  height: 30px;\\n  background-color: #bdbdbd; }\\n.task-manager-task-cards-complete:hover {\\n    width: 30px;\\n    height: 30px;\\n    background-color: #fafafa; }\\n.task-manager-task-cards-title {\\n  width: 500px;\\n  font-size: 20px;\\n  letter-spacing: normal;\\n  color: #000000; }\\n.task-manager-task-cards-label {\\n  width: 200px;\\n  border-radius: 10px;\\n  background-color: #6effe8;\\n  font-size: 14px;\\n  letter-spacing: normal;\\n  color: #000000;\\n  text-align: center; }\\n.task-manager-task-cards-period {\\n  width: 220px; }\\n.task-manager-task-cards-note {\\n  width: 300px;\\n  font-size: 16px;\\n  letter-spacing: normal;\\n  color: #bdbdbd; }\\n/* タスク登録ボタン */\\n#task-manager-task-submit-button {\\n  width: 100%; }\\n/* ----------------------\\n * 画面全体\\n * ----------------------*/\\n#task-manager-taskline-container {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex; }\\n/* ----------------------\\n * タスクカードコンテナ\\n * ----------------------*/\\n/* タスクカードコンテナスペース全体 */\\n#task-manager-task-timeline-container-space {\\n  -webkit-box-flex: 1;\\n      -ms-flex: 1;\\n          flex: 1;\\n  margin: 50px 50px; }\\n/* タスクカードコンテナ */\\n#task-manager-task-card-container {\\n  width: 800px;\\n  height: 550px;\\n  margin: 0 auto;\\n  margin-top: 50px;\\n  padding: 0;\\n  background-color: #fafafa; }\\n/* 表示切り替えswitch, flexboxの親要素にする */\\n#task-manager-task-switch-box {\\n  margin: 0 auto;\\n  padding: 0;\\n  height: 40px;\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex; }\\n/* 切り替えswitchデフォルト */\\n.task-manager-task-switch-item, .task-manager-task-switch-item:hover {\\n  margin: 0 auto;\\n  padding: 0;\\n  -webkit-box-flex: 50%;\\n      -ms-flex: 50%;\\n          flex: 50%;\\n  text-align: center; }\\n.task-manager-task-switch-item img, .task-manager-task-switch-item:hover img {\\n    width: 30px;\\n    height: 30px; }\\n.task-manager-task-switch-item:hover {\\n  border-bottom: 1px solid #1ef5bf; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/component/taskline/taskline.component.scss\n// module id = ./src/app/component/taskline/taskline.component.scss\n// module chunks = main","import { Component, OnInit } from '@angular/core';\nimport { CommonDeliveryService } from '../../service/common-delivery.service';\nimport { Router } from '@angular/router';\nimport { TaskService } from '../../service/task.service';\nimport { ObjectUtil } from '../../util/object.util';\nimport { ServiceConst } from '../../const/service-const';\nimport { Task } from '../../entity/task';\nimport { _ } from 'underscore';\nimport { TaskLabel } from '../../entity/task-label';\nimport { TaskLabelRelation } from '../../dto/task-label-relation';\nimport { MAT_RIPPLE_GLOBAL_OPTIONS } from '@angular/material';\nimport { CollectionUtil } from '../../util/collection-util';\n\n/**\n * タスクタイムラインコンポーネント\n */\n@Component({\n  selector: 'app-taskline',\n  templateUrl: './taskline.component.html',\n  styleUrls: ['./taskline.component.scss']\n})\nexport class TasklineComponent implements OnInit {\n\n    constructor(private taskService: TaskService, private router: Router, private commonDeliveryService: CommonDeliveryService) { }\n\n    /**\n     * 利用者ID\n     */ \n    public userId: string;\n\n    /**\n     * タスクリスト \n     */ \n    public tasks: Task[] = [];\n\n    /**\n     * タスクラベル\n     */\n    public labels: TaskLabel[] = [];\n\n    /**\n     * タスクのラベルと一覧の関係配列オブジェクト\n     */\n    public relations: TaskLabelRelation[] = [];\n\n    /**\n     * コンポーネント初期化時の起動処理\n    */\n    ngOnInit() {\n        // リダイレクトされたときに、別のコンポーネントから動的に利用者IDを受け取ります。\n        this.commonDeliveryService.observableUserId.subscribe((userId: string) => this.userId = userId);\n\n        // 利用者IDが正常に設定されていない場合、リダイレクトしてアクセスを拒否する\n        if (ObjectUtil.isNullOrUndefined(this.userId)) {\n            this.router.navigateByUrl(ServiceConst.BASE_SLASH + ServiceConst.URL_WEB_USER_SIGNIN);\n        }\n        \n        // タスクのリストをプロパティに設定\n        this.tasks = this.commonDeliveryService.userTasks;\n\n        // ラベルをプロパティに設定\n        this.labels = this.commonDeliveryService.userLabels;\n\n        // ラベル別にソートしたプロジェクトタスクの関係性を設定\n        this.setProjects();\n\n        console.log(JSON.stringify(this.relations))\n    }\n\n    /**\n     * プロジェクトの名前およびタスクの関係を設定します。\n     */\n    public setProjects(): void{\n        // ユーザがラベルを登録していることを確認する\n        if(CollectionUtil.hasItems(this.commonDeliveryService.userLabels) && CollectionUtil.hasItems(this.commonDeliveryService.userTasks)){\n            for(var label of this.commonDeliveryService.userLabels){\n                var filteredTasks: Task[] = [];\n                for(var task of this.tasks){\n                    if(label.taskLabel === task.taskLabel){\n                        filteredTasks.push(task);\n                    }\n                }\n\n                var relation: TaskLabelRelation = new TaskLabelRelation();\n                relation.taskLabel = label.taskLabel;\n                relation.tasks = filteredTasks;\n\n                // フィルターしたタスクの表とラベル名をリレーションに設定する\n                this.relations.push(relation);\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/component/taskline/taskline.component.ts","module.exports = \"<div>\\n    <!-- 見出しタイトル -->\\n    <h1 id=\\\"task-manager-signin-title\\\">\\n        サインインしてParallelを続ける\\n    </h1>\\n\\n    <!-- 入力フォームコンテナ -->\\n    <form [formGroup]=\\\"signinForm\\\" id=\\\"task-manager-signin-item-container\\\">\\n        <input formControlName=\\\"emailControl\\\" type=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"メールアドレス\\\" >\\n        <input formControlName=\\\"passwordControl\\\" type=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"パスワード\\\" >\\n        <button (click)=\\\"signin()\\\" [disabled]=\\\"\\\">サインイン</button>\\n\\n        <!-- 入力チェックエラー表示 -->\\n        <div *ngIf=\\\"violateRistriction()\\\" id=\\\"task-manager-signin-error\\\">\\n            <p>\\n                {{ checkedResult }}\\n            </p>\\n        </div>\\n    </form>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/component/user/signin/signin.component.html\n// module id = ./src/app/component/user/signin/signin.component.html\n// module chunks = main","module.exports = \"@charset \\\"UTF-8\\\";\\n/* ----------------------\\n * 共通スタイル変数\\n * ----------------------*/\\n/* 背景色グレー1番 */\\n/* 背景色グレー2番 */\\n/* 背景色緑1番 */\\n/* 背景色緑2番 */\\n/* 背景色緑3番 */\\n/* 基本フォント色 */\\n/* 入力チェックエラー共通 */\\n.base-error-message-style, #task-manager-signin-error {\\n  margin: 20px 20px;\\n  text-align: center;\\n  color: red; }\\n/* ----------------------\\n * 共通\\n ----------------------*/\\n/* 枠線反映しない */\\ninput, button {\\n  border-style: none;\\n  border-radius: 5px; }\\n/* リスト表示しない */\\nul li {\\n  margin: 0;\\n  padding: 0;\\n  list-style: none; }\\n/* リンクの装飾を無効化 */\\na {\\n  text-decoration: none;\\n  color: #000000; }\\n/* 画面全体 */\\nhtml {\\n  height: 100%; }\\n/* 共通フォント */\\nbody {\\n  height: 100%;\\n  font-family: NotoSansCJKjp, メイリオ, Meiryo, Osaka, 'ＭＳ Ｐゴシック', 'MS PGothic', sans-serif; }\\n/* タイトル用独自定義フォント */\\n@font-face {\\n  font-family: 'Product Sans';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local(\\\"Open Sans\\\"), local(\\\"OpenSans\\\"), url(https://fonts.gstatic.com/s/productsans/v5/HYvgU2fE2nRJvZ5JFAumwegdm0LZdjqr5-oayXSOefg.woff2) format(\\\"woff2\\\"); }\\n/* ----------------------\\n * 共通スタイル変数\\n * ----------------------*/\\n/* 背景色グレー1番 */\\n/* 背景色グレー2番 */\\n/* 背景色緑1番 */\\n/* 背景色緑2番 */\\n/* 背景色緑3番 */\\n/* 基本フォント色 */\\n/* 入力チェックエラー共通 */\\n.base-error-message-style, #task-manager-signin-error {\\n  text-align: center;\\n  color: red; }\\n/* スタイルの変化仕様、ゆっくり */\\n.base-transition-ease, #task-manager-header-links li:hover {\\n  -webkit-transition-property: all;\\n  transition-property: all;\\n  -webkit-transition-duration: 300ms;\\n          transition-duration: 300ms;\\n  -webkit-transition-timing-function: ease;\\n          transition-timing-function: ease;\\n  -webkit-transition-delay: 0;\\n          transition-delay: 0; }\\n/* 登録ボタン共通仕様。幅は利用箇所で指定する */\\n.common-button-submit {\\n  height: 40px;\\n  font-size: 18px;\\n  letter-spacing: normal;\\n  text-align: center;\\n  color: #000;\\n  background-color: #00b686; }\\n/* ----------------------\\n * ヘッダーナビゲーション\\n * ----------------------/\\n/* ヘッダータイトル行 */\\n#task-manager-common-header {\\n  width: 100%;\\n  height: 70px;\\n  background-color: #1ef5bf;\\n  padding: 0px;\\n  margin: 0px;\\n  border-bottom: 1px solid #bdbdbd; }\\n#task-manager-common-header a {\\n    font-family: Product Sans;\\n    font-size: 60px; }\\n/* 共通ヘッダー（リンクナビゲーション） */\\n#task-manager-header-links {\\n  width: 100%;\\n  height: 50px;\\n  background-color: #1ef5bf;\\n  padding: 0px;\\n  margin: 0;\\n  text-align: right; }\\n#task-manager-header-links ul {\\n    display: inline-block;\\n    padding: 0;\\n    margin: 5px; }\\n#task-manager-header-links li {\\n    display: inline-block;\\n    font-size: 20px;\\n    border: 1px solid #bdbdbd;\\n    border-radius: 3px; }\\n#task-manager-header-links li:hover {\\n    background-color: #bdbdbd; }\\n/* ----------------------\\n * 使い回しパーツ\\n * ----------------------/\\n\\n/* マージン */\\n.mt-50 {\\n  margin-top: 50px; }\\n.mt-20-centered {\\n  margin: 20px 0 0 0; }\\n.mt-50-centered {\\n  margin: 50px 0 0 0; }\\n.mt-20 {\\n  margin-top: 20px; }\\n.mb-50 {\\n  margin-bottom: 50px; }\\n.ml-20 {\\n  margin-left: 20px; }\\n/* パディング */\\n.pt-50 {\\n  padding-top: 50px; }\\n.pt-50-centered {\\n  padding: 50px 0 0 0; }\\n.pt-20 {\\n  padding-top: 20px; }\\n.pr-20 {\\n  padding-right: 20px; }\\n.padding-leftright-10, #task-manager-common-header a, #task-manager-header-links li {\\n  padding: 0 10px 0 10px; }\\n.pl-20 {\\n  padding-left: 20px; }\\n/* ----------------------\\n * 共通スタイル変数\\n * ----------------------*/\\n/* 背景色グレー1番 */\\n/* 背景色グレー2番 */\\n/* 背景色緑1番 */\\n/* 背景色緑2番 */\\n/* 背景色緑3番 */\\n/* 基本フォント色 */\\n/* 入力チェックエラー共通 */\\n.base-error-message-style, #task-manager-signin-error {\\n  margin: 20px 20px;\\n  text-align: center;\\n  color: red; }\\n/* ----------------------\\n * 画面見出し\\n * ---------------------*/\\n#task-manager-signin-title {\\n  margin: 50px 0 0 0;\\n  padding: 0;\\n  text-align: center; }\\n#task-manager-signin-title h1 {\\n  display: inline-block;\\n  font-family: Roboto;\\n  font-size: 30px;\\n  font-weight: normal;\\n  font-style: normal;\\n  font-stretch: normal;\\n  line-height: normal;\\n  letter-spacing: normal;\\n  color: #000000; }\\n/* ----------------------\\n * 入力フォームコンテナ\\n * ----------------------*/\\n#task-manager-signin-item-container {\\n  width: 576px;\\n  height: 420px;\\n  border-radius: 10px;\\n  background-color: #fafafa;\\n  margin: 0 auto;\\n  padding: 0;\\n  text-align: center; }\\n#task-manager-signin-item-container input {\\n    width: 300px;\\n    height: 40px;\\n    font-size: 20px;\\n    letter-spacing: normal;\\n    color: #bdbdbd;\\n    display: inline-block;\\n    margin: 50px 0 0 0;\\n    text-align: center;\\n    background-color: #fafafa; }\\n#task-manager-signin-item-container button {\\n    width: 300px;\\n    height: 40px;\\n    font-size: 20px;\\n    letter-spacing: normal;\\n    text-align: center;\\n    margin: 50px 0 0 0;\\n    background-color: #00b686; }\\n/* ----------------------\\n * 入力チェックエラー\\n * ----------------------*/\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/component/user/signin/signin.component.scss\n// module id = ./src/app/component/user/signin/signin.component.scss\n// module chunks = main","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\nimport { AppConst } from '../../../const/app.const';\nimport { Router } from '@angular/router';\nimport { SigninService } from '../../../service/signin.service';\nimport { CommonDeliveryService } from '../../../service/common-delivery.service';\nimport { UserSigninRequestDto } from '../../../dto/interface/user-signin-request.dto';\nimport { UserSigninResponseDto } from '../../../dto/interface/user-signin-response.dto';\nimport { ObjectUtil } from '../../../util/object.util';\nimport { ServiceConst } from '../../../const/service-const';\nimport { StringUtil } from '../../../util/string-util';\n\n\n/**\n * 利用者認証コンポーネントクラス。\n */\n@Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n  styleUrls: ['./signin.component.scss']\n})\nexport class SigninComponent implements OnInit {\n\n    /**\n     * デフォルトコンストラクタ。\n     */\n    constructor(private signinService: SigninService, private router: Router, private commonDeliveryService: CommonDeliveryService) {\n        this.router = router;\n    }\n\n    /** \n     * タスクチェック結果\n     */\n    public checkedResult: string;\n\n    /**\n     * 利用者認証フォームグループ\n     */\n    public signinForm: FormGroup = new FormGroup({\n        emailControl: new FormControl(\"\", [Validators.required, Validators.maxLength(AppConst.USER_EMAIL_MAX_LENGTH),\n            Validators.email]),\n        passwordControl: new FormControl(\"\", [Validators.required, Validators.maxLength(AppConst.USER_PASSWORD_MAX_LENGTH),\n            Validators.pattern(StringUtil.REGEX_FORMAT_HALF_SIZE)])\n    });\n\n    /**\n     * 利用者ID\n     */\n    public userId: string;\n\n    ngOnInit() {\n    }  \n\n    /**\n     * サインインを実行します。\n     */\n    public signin(): void {\n        // リクエストの作成。\n        var req: UserSigninRequestDto = new UserSigninRequestDto();\n        req.email = this.signinForm.get(\"emailControl\").value;\n        req.password = this.signinForm.get(\"passwordControl\").value;\n\n        // サービスクラスを実行します。\n        this.signinService.signin(req).subscribe((res: UserSigninResponseDto) => {\n            // 正常な場合、サービス経由で利用者IDをタスクコンポーネントに引き渡してリダイレクト\n            if (ObjectUtil.isNullOrUndefined(res.errors)) {\n                this.commonDeliveryService.emitUserIdChange(res.userId);\n                this.router.navigateByUrl(ServiceConst.BASE_SLASH + ServiceConst.URL_WEB_TASK);\n            } else {\n                this.checkedResult = AppConst.USER_INFO_INVALID;\n            }\n        })\n    }\n\n    /**\n     * 入力チェックに適合していることをチェックします。\n     * @returns boolean\n     */\n    public violateRistriction(): boolean{\n        var email: AbstractControl = this.signinForm.get(\"emailControl\");\n        // メールアドレスの入力チェック。\n        if (email.hasError('required') && (email.dirty || email.touched)) {\n            this.checkedResult = AppConst.USER_SIGNUP_EMAIL_REQUIRED_VIOLATED;\n            return true;\n        } else if (email.hasError('maxlength') && (email.dirty || email.touched)) {\n            this.checkedResult = AppConst.USER_SIGNUP_EMAIL_LENGTH_VIOLATED;\n            return true;\n        } else if (email.hasError(\"email\") && (email.dirty || email.touched)) {\n            this.checkedResult = AppConst.USER_SIGNUP_EMAIL_INVALID_FORMAT;\n            return true;\n        }\n\n        var password: AbstractControl = this.signinForm.get(\"passwordControl\");\n        // パスワードの入力チェック。\n        if (password.hasError('required') && (password.dirty || password.touched)) {\n            this.checkedResult = AppConst.USER_SIGNUP_PASSWORD_REQUIRED_VIOLATED;\n            return true;\n        } else if (password.hasError('maxlength') && (password.dirty || password.touched)) {\n            this.checkedResult = AppConst.USER_SIGNUP_PASSWORD_LENGTH_VIOLATED;\n            return true;\n        } else if (password.hasError('pattern') && (password.dirty || password.touched)) {\n            this.checkedResult = AppConst.USER_PASSWORD_NOT_HALF_SIZED;\n            return true;\n        }\n        return false;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/component/user/signin/signin.component.ts","module.exports = \"<div>\\n\\n    <!-- 画面見出し -->\\n    <h1 id=\\\"task-manager-signup-title\\\">\\n        Parallelを新しく始める\\n    </h1>\\n\\n    <!-- 入力フォームコンテナ -->\\n    <form [formGroup]=\\\"signupForm\\\" id=\\\"task-manager-signup-item-container\\\">\\n        <input formControlName=\\\"userNameControl\\\" type=\\\"text\\\" name=\\\"userName\\\" placeholder=\\\"名前\\\" >\\n        <input formControlName=\\\"emailControl\\\" type=\\\"text\\\" name=\\\"email\\\" placeholder=\\\"メールアドレス\\\" >\\n        <input formControlName=\\\"passwordControl\\\" type=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"パスワード\\\" >\\n        <button (click)=\\\"signup()\\\" [disabled]=\\\"\\\">サインアップ</button>\\n\\n        <!-- 入力チェックエラー -->\\n        <div *ngIf=\\\"violateRistriction()\\\" id=\\\"task-manager-signup-error\\\">\\n            <p>\\n                {{ checkedResult }}\\n            </p>\\n        </div>\\n    </form>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/component/user/signup/signup.component.html\n// module id = ./src/app/component/user/signup/signup.component.html\n// module chunks = main","module.exports = \"@charset \\\"UTF-8\\\";\\n/* ----------------------\\n * 共通スタイル変数\\n * ----------------------*/\\n/* 背景色グレー1番 */\\n/* 背景色グレー2番 */\\n/* 背景色緑1番 */\\n/* 背景色緑2番 */\\n/* 背景色緑3番 */\\n/* 基本フォント色 */\\n/* 入力チェックエラー共通 */\\n.base-error-message-style {\\n  margin: 20px 20px;\\n  text-align: center;\\n  color: red; }\\n/* ----------------------\\n * 共通\\n ----------------------*/\\n/* 枠線反映しない */\\ninput, button {\\n  border-style: none;\\n  border-radius: 5px; }\\n/* リスト表示しない */\\nul li {\\n  margin: 0;\\n  padding: 0;\\n  list-style: none; }\\n/* リンクの装飾を無効化 */\\na {\\n  text-decoration: none;\\n  color: #000000; }\\n/* 画面全体 */\\nhtml {\\n  height: 100%; }\\n/* 共通フォント */\\nbody {\\n  height: 100%;\\n  font-family: NotoSansCJKjp, メイリオ, Meiryo, Osaka, 'ＭＳ Ｐゴシック', 'MS PGothic', sans-serif; }\\n/* タイトル用独自定義フォント */\\n@font-face {\\n  font-family: 'Product Sans';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local(\\\"Open Sans\\\"), local(\\\"OpenSans\\\"), url(https://fonts.gstatic.com/s/productsans/v5/HYvgU2fE2nRJvZ5JFAumwegdm0LZdjqr5-oayXSOefg.woff2) format(\\\"woff2\\\"); }\\n/* ----------------------\\n * 共通スタイル変数\\n * ----------------------*/\\n/* 背景色グレー1番 */\\n/* 背景色グレー2番 */\\n/* 背景色緑1番 */\\n/* 背景色緑2番 */\\n/* 背景色緑3番 */\\n/* 基本フォント色 */\\n/* 入力チェックエラー共通 */\\n.base-error-message-style {\\n  text-align: center;\\n  color: red; }\\n/* スタイルの変化仕様、ゆっくり */\\n.base-transition-ease, #task-manager-header-links li:hover {\\n  -webkit-transition-property: all;\\n  transition-property: all;\\n  -webkit-transition-duration: 300ms;\\n          transition-duration: 300ms;\\n  -webkit-transition-timing-function: ease;\\n          transition-timing-function: ease;\\n  -webkit-transition-delay: 0;\\n          transition-delay: 0; }\\n/* 登録ボタン共通仕様。幅は利用箇所で指定する */\\n.common-button-submit {\\n  height: 40px;\\n  font-size: 18px;\\n  letter-spacing: normal;\\n  text-align: center;\\n  color: #000;\\n  background-color: #00b686; }\\n/* ----------------------\\n * ヘッダーナビゲーション\\n * ----------------------/\\n/* ヘッダータイトル行 */\\n#task-manager-common-header {\\n  width: 100%;\\n  height: 70px;\\n  background-color: #1ef5bf;\\n  padding: 0px;\\n  margin: 0px;\\n  border-bottom: 1px solid #bdbdbd; }\\n#task-manager-common-header a {\\n    font-family: Product Sans;\\n    font-size: 60px; }\\n/* 共通ヘッダー（リンクナビゲーション） */\\n#task-manager-header-links {\\n  width: 100%;\\n  height: 50px;\\n  background-color: #1ef5bf;\\n  padding: 0px;\\n  margin: 0;\\n  text-align: right; }\\n#task-manager-header-links ul {\\n    display: inline-block;\\n    padding: 0;\\n    margin: 5px; }\\n#task-manager-header-links li {\\n    display: inline-block;\\n    font-size: 20px;\\n    border: 1px solid #bdbdbd;\\n    border-radius: 3px; }\\n#task-manager-header-links li:hover {\\n    background-color: #bdbdbd; }\\n/* ----------------------\\n * 使い回しパーツ\\n * ----------------------/\\n\\n/* マージン */\\n.mt-50 {\\n  margin-top: 50px; }\\n.mt-20-centered {\\n  margin: 20px 0 0 0; }\\n.mt-50-centered {\\n  margin: 50px 0 0 0; }\\n.mt-20 {\\n  margin-top: 20px; }\\n.mb-50 {\\n  margin-bottom: 50px; }\\n.ml-20 {\\n  margin-left: 20px; }\\n/* パディング */\\n.pt-50 {\\n  padding-top: 50px; }\\n.pt-50-centered {\\n  padding: 50px 0 0 0; }\\n.pt-20 {\\n  padding-top: 20px; }\\n.pr-20 {\\n  padding-right: 20px; }\\n.padding-leftright-10, #task-manager-common-header a, #task-manager-header-links li {\\n  padding: 0 10px 0 10px; }\\n.pl-20 {\\n  padding-left: 20px; }\\n/* ----------------------\\n * 画面見出し\\n * ---------------------*/\\n#task-manager-signup-title {\\n  margin: 50px 0 0 0;\\n  padding: 0;\\n  text-align: center; }\\n#task-manager-signup-title h1 {\\n    display: inline-block;\\n    font-family: Roboto;\\n    font-size: 30px;\\n    letter-spacing: normal;\\n    color: #000000; }\\n/* ----------------------\\n * 入力フォームコンテナ\\n * ----------------------*/\\n#task-manager-signup-item-container {\\n  width: 576px;\\n  height: 420px;\\n  border-radius: 10px;\\n  background-color: #fafafa;\\n  margin: 0 auto;\\n  padding: 0;\\n  text-align: center; }\\n#task-manager-signup-item-container input {\\n    width: 300px;\\n    height: 40px;\\n    font-size: 20px;\\n    letter-spacing: normal;\\n    color: #bdbdbd;\\n    display: inline-block;\\n    margin: 50px 0 0 0;\\n    text-align: center;\\n    background-color: #fafafa; }\\n#task-manager-signup-item-container button {\\n    width: 300px;\\n    height: 40px;\\n    font-size: 20px;\\n    letter-spacing: normal;\\n    text-align: center;\\n    margin: 50px 0 0 0;\\n    background-color: #00b686; }\\n/* ----------------------\\n * 入力チェックエラー\\n * ----------------------*/\\n#task-manager-signup-error {\\n  text-align: center;\\n  color: red; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/component/user/signup/signup.component.scss\n// module id = ./src/app/component/user/signup/signup.component.scss\n// module chunks = main","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\nimport { AppConst } from '../../../const/app.const';\nimport { SignupService } from '../../../service/signup.service';\nimport { UserSignupRequestDto } from '../../../dto/interface/user-signup-request.dto';\nimport { TaskManagerCode } from '../../../codedef/task-manager-code';\nimport { UserSignupResponseDto } from '../../../dto/interface/user-signup-response.dto';\nimport { Router } from '@angular/router';\nimport { ServiceConst } from '../../../const/service-const';\nimport { ObjectUtil } from '../../../util/object.util';\nimport { CommonDeliveryService } from '../../../service/common-delivery.service';\nimport { StringUtil } from '../../../util/string-util';\n\n/**\n * 利用者サインアップコンポーネントクラス。\n */\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\nexport class SignupComponent implements OnInit {\n\n    //-----------------------------\n    // コンポーネント内プロパティ\n    //-----------------------------\n\n    /**\n     * デフォルトコンストラクタ\n     */\n    constructor(private signupService: SignupService, private router: Router, private commonDeliveryService: CommonDeliveryService) { \n        this.router = router;\n    }\n\n    ngOnInit() {\n    }\n\n    /**\n     * ルートコンポーネント、およびタスクコンポーネントに渡す利用者IDプロパティ、イベント出力\n     */\n    @Output()\n    public userId = new EventEmitter<String>();\n\n    /** \n     * バリデーションチェック結果\n     */\n    public checkedResult: string;\n\n    /**\n     * 利用者情報登録フォームグループ\n     */\n    public signupForm: FormGroup = new FormGroup({\n        userNameControl: new FormControl(\"\", [Validators.required, Validators.maxLength(AppConst.USER_NAME_MAX_LENGTH)]),\n        emailControl: new FormControl(\"\", [Validators.required, Validators.maxLength(AppConst.USER_EMAIL_MAX_LENGTH), \n            Validators.email]),\n        passwordControl: new FormControl(\"\", [Validators.required, Validators.maxLength(AppConst.USER_PASSWORD_MAX_LENGTH),\n            Validators.pattern(StringUtil.REGEX_FORMAT_HALF_SIZE)])\n    })\n\n    /**\n     * サインアップを実行します。\n     */\n    public signup(): void {\n        if (!this.violateRistriction()) {\n            // リクエストの生成\n            var req: UserSignupRequestDto = new UserSignupRequestDto();\n            req.userName = this.signupForm.get(\"userNameControl\").value;\n            req.email = this.signupForm.get(\"emailControl\").value;\n            req.password = this.signupForm.get(\"passwordControl\").value;\n            req.usedFlag = TaskManagerCode.USER_USED_FLAG_USED;\n\n            // Serviceクラスを実行します。\n            this.signupService.signup(req).subscribe((res: UserSignupResponseDto) => {\n                console.log(JSON.stringify(res));\n                // すでに使われているメールアドレスの場 合は、エラーメッセージを表示して何もしない\n                if (!ObjectUtil.isNullOrUndefined(res.errors)) {\n                    this.checkedResult = AppConst.USER_ALREADY_REGISTERD;\n                    console.log(this.checkedResult);\n                } else {\n                    this.commonDeliveryService.emitUserIdChange(res.userId);\n                    this.router.navigateByUrl(ServiceConst.BASE_SLASH + ServiceConst.URL_WEB_TASK);\n                }\n                },\n                (error) => {\n                    console.warn(JSON.stringify(error.error));\n                }\n            )\n        }\n    }\n\n    /**\n     * 入力チェックに適合していることをチェックします。\n     * @returns boolean\n     */\n    public violateRistriction(): boolean{\n        var userName: AbstractControl = this.signupForm.get(\"userNameControl\");\n        // 名前の入力チェック。\n        if (userName.hasError('required') && (userName.dirty || userName.touched)) {\n          this.checkedResult = AppConst.USER_SIGNUP_USERNAME_REQUIRED_VIOLATED;\n          return true;\n        } else if (userName.hasError('maxlength') && (userName.dirty || userName.touched)) {\n          this.checkedResult = AppConst.USER_SIGNUP_USERNAME_LENGTH_VIOLATED;\n          return true;\n        }\n\n        var email: AbstractControl = this.signupForm.get(\"emailControl\");\n        // メールアドレスの入力チェック。\n        if (email.hasError('required') && (email.dirty || email.touched)) {\n          this.checkedResult = AppConst.USER_SIGNUP_EMAIL_REQUIRED_VIOLATED;\n          return true;\n        } else if (email.hasError('maxlength') && (email.dirty || email.touched)) {\n          this.checkedResult = AppConst.USER_SIGNUP_EMAIL_LENGTH_VIOLATED;\n          return true;\n        } else if (email.hasError('email') && (email.dirty || email.touched)) {\n            this.checkedResult = AppConst.USER_EMAIL_NOT_HALF_SIZED;\n            return true;\n        }\n\n        var password: AbstractControl = this.signupForm.get(\"passwordControl\");\n        // パスワードの入力チェック。\n        if (password.hasError('required') && (password.touched || password.dirty)) {\n          this.checkedResult = AppConst.USER_SIGNUP_PASSWORD_REQUIRED_VIOLATED;\n          return true;\n        } else if (password.hasError('maxlength') && (password.touched || password.dirty)) {\n          this.checkedResult = AppConst.USER_SIGNUP_PASSWORD_LENGTH_VIOLATED;\n          return true;\n        } else if (password.hasError('pattern') && (password.touched || password.dirty)) {\n            this.checkedResult = AppConst.USER_PASSWORD_NOT_HALF_SIZED;\n            return true;\n        }\n        return false;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/component/user/signup/signup.component.ts","/**\n * アプリケーション共有の定数クラスです。\n */\nexport module AppConst {\n\n    /**\n     * 空文字\n     */\n    export const BLANK: string = \"\";\n\n    /**\n     * スラッシュ\n     */\n    export const SLASH: string = \"/\";\n\n    /**\n     * 改行コード\n     */\n    export const STR_NEW_LINE: string = \"\\n\";\n\n    /**\n     * セミコロン\n     */\n    export const STR_SEMI_COLON: string = \";\";\n\n    //-----------------------------\n    // バリデーション定義\n    //-----------------------------\n    /**\n     * タスクタイトル、100桁\n     */\n    export const TASK_TITLE_MAX_LENGTH: number = 100;\n\n    /**\n     * タスクラベル、50桁\n     */\n    export const TASK_LABEL_MAX_LENGTH: number = 50;\n\n    /**\n     * 完了フラグ、1桁\n     */\n    export const COMPLETED_FLAG_LENGTH: number = 1;\n\n    /**\n     * タスクメモ、200桁\n     */\n    export const TASK_NOTE_MAX_LENGTH: number = 200;\n\n    /**\n     * 利用者名、50桁\n     */\n    export const USER_NAME_MAX_LENGTH: number = 50;\n\n    /**\n     * 利用者メールアドレス、100桁\n     */\n    export const USER_EMAIL_MAX_LENGTH: number = 100;\n\n    /**\n     * 利用者パスワード、100桁\n     */\n    export const USER_PASSWORD_MAX_LENGTH: number = 100;\n\n    /**\n     * 利用者利用フラグ、1桁\n     */\n    export const USER_USED_FLAG_LENGTH: number = 1;\n\n    //-----------------------------\n    // バリデーション違反メッセージ\n    //-----------------------------\n    /**\n     * タイトルが入力されていません。タイトルは必須です。\n     */\n    export const TASK_TITLE_REQUIRED_VIOLATED: string = \"タイトルが入力されていません。タイトルは必須です。\";\n\n    /**\n     * ラベル名が入力されていません。ラベル名は必須入力です。\n     */\n    export const TASK_LABEL_REQUIRED_VIOLATED: string = \"ラベル名が入力されていません。ラベル名は必須入力です。\";\n\n    /**\n     * タイトルが長すぎます。100文字までです。\n     */\n    export const TASK_TITLE_LENGTH_VIOLATED: string = \"タイトルが長すぎます。100文字までです。\";\n\n    /**\n     * ラベルが長すぎます。50文字までです。\n     */\n    export const TASK_LABEL_LENGTH_VIOLATED: string = \"ラベルが長すぎます。50文字までです。\";\n\n    /**\n     * 完了フラグが1桁ではありません。\n     */\n    export const COMPLETED_FLAG_LENGTH_VIOLATED: string = \"完了フラグが1桁ではありません。\";\n\n    /**\n     * タスクのメモが長すぎます。メモは200文字までです。\n     */\n    export const TASK_NOTE_LENGTH_VIOLATED: string = \"タスクのメモが長すぎます。メモは200文字までです。\";\n\n    /**\n     * 日付の設定に不備があります。終了日を開始日より後に設定してください。\n     */\n    export const DEADLINE_SET_BEFORE_START_DATE: string = \"日付の設定に不備があります。終了日を開始日より後に設定してください。\";\n\n    /**\n     * 名前が入力されていません。名前は必須入力です。\n     */\n    export const USER_SIGNUP_USERNAME_REQUIRED_VIOLATED: string = \"名前が入力されていません。名前は必須入力です。\";\n\n    /**\n     * 名前が長すぎます。名前は50文字までです。\n     */\n    export const USER_SIGNUP_USERNAME_LENGTH_VIOLATED: string = \"名前が長すぎます。名前は50文字までです。\";\n\n    /**\n     * メールアドレスが入力されていません。メールアドレスは必須入力です。\n     */\n    export const USER_SIGNUP_EMAIL_REQUIRED_VIOLATED: string = \"メールアドレスが入力されていません。メールアドレスは必須入力です。\";\n\n    /**\n     * 入力された文字列はメールアドレス形式ではありません。\n     */\n    export const USER_SIGNUP_EMAIL_INVALID_FORMAT: string = \"入力された文字列はメールアドレス形式ではありません。\";\n\n    /**\n     * メールアドレスが長すぎます。メールアドレスは100文字までです。\n     */\n    export const USER_SIGNUP_EMAIL_LENGTH_VIOLATED: string = \"メールアドレスが長すぎます。メールアドレスは100文字までです。\";\n\n    /**\n     * パスワードが入力されていません。パスワードは必須入力です。\n     */\n    export const USER_SIGNUP_PASSWORD_REQUIRED_VIOLATED: string = \"パスワードが入力されていません。パスワードは必須入力です。\";\n\n    /**\n     * パスワードが長すぎます。パスワードは100文字までです。\n     */\n    export const USER_SIGNUP_PASSWORD_LENGTH_VIOLATED: string = \"パスワードが長すぎます。パスワードは100文字までです。\";\n\n    /**\n     * メールアドレスは半角英数字のみ使用してください。\n     */\n    export const USER_EMAIL_NOT_HALF_SIZED: string = \"メールアドレスは半角英数字のみ使用してください。\";\n\n    /**\n     * パスワードは半角英数字のみ使用してください。\n     */\n    export const USER_PASSWORD_NOT_HALF_SIZED: string = \"パスワードは半角英数字のみ使用してください。\";\n\n    /**\n     * 入力されたパスワードはすでに利用されています。\n     */\n    export const USER_ALREADY_REGISTERD: string = \"入力されたパスワードはすでに利用されています。\";\n\n    /**\n     * 入力された利用者情報は存在しません。メールアドレス、もしくはパスワードが正しいことを確認してください。\n     */\n    export const USER_INFO_INVALID: string = \"入力された利用者情報は存在しません。メールアドレス、もしくはパスワードが正しいことを確認してください。\";\n\n    //-----------------------------\n    // 共通エラーメッセージ\n    //-----------------------------\n\n    /**\n     * API通信中にエラーが発生しました : \n     */\n    export const GLOBAL_ERROR_MESSAGE: string = \"API通信中にエラーが発生しました : \";\n\n    /**\n     * HTTPステータスコード : \n     */\n    export const GLOBAL_ERROR_STATUS_CODE: string = \"HTTPステータスコード : \";\n\n    /**\n     * HTTPエラーメッセージ : \n     */\n    export const GLOBAL_ERROR_STATUS_MESSAGE: string = \"HTTPエラーメッセージ : \";\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/const/app.const.ts","/**\n * Service共通の定数定義モジュールです.\n */\nexport module ServiceConst {\n\n  //-----------------------------\n  //APIURLの基本コンポーネント定義\n  //-----------------------------\n  \n  /**\n   * ドメイン\n   */\n  export const BASE_URL = 'http://localhost:18080/';\n  \n  /**\n   * コンテキストパス\n   */\n  export const BASE_API_VERSION = 'api/v1';\n  \n  /**\n   * 処理大項目：タスク\n   */\n  export const BASE_URL_FUNC = '/task';\n  \n  /**\n   * 処理大項目：利用者\n   */\n  export const BASE_URL_USER = '/user';\n\n  /**\n   * 処理中項目：タスクラベル\n   */\n  export const BASE_URL_TASK_LABEL_FUNC = '/label';\n  \n  /**\n   * スラッシュ\n   */\n  export const BASE_SLASH = '/';\n\n  //-----------------------------\n  // 画面URL定義\n  //-----------------------------\n  /**\n   * トップページ\n   */\n  export const URL_WEB_MAIN = \"\";\n\n  /**\n   * タスク一覧画面\n   */\n  export const URL_WEB_TASK = 'task';\n\n  /**\n   * タスクタイムライン表示\n   */\n  export const URL_WEB_TIMELINE: string = URL_WEB_TASK + \"/timeline\";\n\n  /**\n   * 利用者登録画面\n   */\n  export const URL_WEB_USER_SIGNUP = 'signup';\n\n  /**\n   * 利用者認証画面\n   */\n  export const URL_WEB_USER_SIGNIN = 'signin';\n\n  //-----------------------------\n  // コールするAPIのURL定義\n  //-----------------------------\n  /** \n   * タスクの新規登録 \n   */\n  export const URL_TASK_REGIST = BASE_URL + BASE_API_VERSION + BASE_URL_FUNC + '/regist';\n  \n  /** \n   * タスクの取得\n   */\n  export const URL_TASK_FETCH = BASE_URL + BASE_API_VERSION + BASE_URL_FUNC + '/fetch';\n  \n  /** \n   * タスクの編集\n   */\n  export const URL_TASK_UPDATE = BASE_URL + BASE_API_VERSION + BASE_URL_FUNC + '/update';\n  \n  /** \n   * タスクの削除 \n   */\n  export const URL_TASK_DELETE = BASE_URL + BASE_API_VERSION + BASE_URL_FUNC + '/delete';\n\n  /**\n   * タスクの完了\n   */\n  export const URL_TASK_COMPLETE = BASE_URL + BASE_API_VERSION + BASE_URL_FUNC + '/complete';\n\n  /**\n   * タスクラベル、取得および登録：/task/label\n   */\n  export const URL_TASK_LABEL = BASE_URL + BASE_API_VERSION + BASE_URL_FUNC + BASE_URL_TASK_LABEL_FUNC;\n\n  /**\n   * 利用者の新規登録\n   */\n  export const URL_USER_REGIST = BASE_URL + BASE_API_VERSION + BASE_URL_USER + '/signup';\n\n  /**\n   * 利用者のサインイン\n   */\n  export const URL_USER_SIGNIN = BASE_URL + BASE_API_VERSION + BASE_URL_USER + '/signin';\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/const/service-const.ts","/**\n * タスク登録リクエストDTOです.\n */\nexport class RegistTaskRequest {\n  \n  /** \n   * タスクタイトル\n   */\n  private taskTitle: string;\n  \n  /**\n   * タスクラベル\n   */\n  private taskLabel: string;\n  \n  /** \n   * 開始日\n   */\n  private startDate: Date | string;\n  \n  /** \n   * 期限日\n   */\n  private deadline: Date;\n  \n  /** \n   * 完了フラグ\n   */\n  private completedFlag: string;\n  \n  /** \n   * 利用者ID\n   */\n  private userId: string;\n  \n  /** \n   * タスクメモ \n   */\n  private taskNote: string;\n\n  public getTaskTitle (): string {\n    return this.taskTitle;\n  }\n  public setTaskTitle (taskTitle: string): void {\n    this.taskTitle = taskTitle;\n  }\n  public getTaskLabel (): string {\n    return this.taskLabel;\n  }\n  public setTaskLabel (taskLabel: string): void {\n    this.taskLabel = taskLabel;\n  }\n  public getStartDate (): Date | string {\n    return this.startDate;\n  }\n  public setStartDate (startDate: Date | string): void {\n    this.startDate = startDate;\n  }\n  public getDeadline (): Date {\n    return this.deadline;\n  }\n  public setDeadline (deadline: Date): void {\n    this.deadline = deadline;\n  }\n  public getCompletedFlag (): string {\n    return this.completedFlag;\n  }\n  public setCompletedFlag (completedFlag: string): void {\n    this.completedFlag = completedFlag;\n  }\n  public getUserId (): string {\n    return this.userId;\n  }\n  public setUserId (userId: string): void {\n    this.userId = userId;\n  }\n  public getTaskNote (): string {\n    return this.taskNote;\n  }\n  public setTaskNote (taskNote: string): void {\n    this.taskNote = taskNote;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/dto/interface/regist-task-request.ts","/**\n * タスク完了リクエストDTOクラス。\n */\nexport class TaskCompleteRequestDto {\n\n    /**\n     * タスクID\n     */\n    private taskId: string;\n\n    public getTaskId(): string {\n        return this.taskId;\n    }\n    public setTaskId(taskId: string): void {\n        this.taskId = taskId;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/dto/interface/task-complete-request.dto.ts","/**\n * タスクラベル登録リクエストDTOクラス。\n */\nexport class TaskLabelRegisterRequestDto {\n\n    /**\n     * タスクラベル\n     */\n    public taskLabel: string;\n\n    /**\n     * タスクラベル利用フラグ\n     */\n    public usedFlag: string;\n    \n    /**\n     * 利用者ID\n     */\n    public userId: string;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/dto/interface/task-label-register-request.dto.ts","/**\n * 利用者サインインリクエストDTO。\n */\nexport class UserSigninRequestDto {\n\n    /**\n     * 利用者メールアドレス\n     */\n    public email: string;\n\n    /**\n     * 利用者パスワード\n     */\n    public password: string;\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/dto/interface/user-signin-request.dto.ts","/**\n * 利用者サインアップリクエストDTO。\n */\nexport class UserSignupRequestDto {\n\n    /**\n     * 利用者名\n     */\n    public userName: string;\n\n    /**\n     * 利用者メールアドレス\n     */\n    public email: string;\n\n    /**\n     * 利用者パスワード\n     */\n    public password: string;\n\n    /**\n     * 利用フラグ\n     */\n    public usedFlag: string;\n\n    // public getUserName() {\n    //     return this.userName;\n    // }\n    // public setUserName(userName: string) {\n    //     this.userName = userName;\n    // }\n    // public getEmail() {\n    //     return this.email;\n    // }\n    // public setEmail(email: string) {\n    //     this.email = email;\n    // }\n    // public getPassword() {\n    //     return this.password;\n    // }\n    // public setPassword(password: string) {\n    //     this.password = password;\n    // }\n    // public getUsedFlag() {\n    //     return this.usedFlag;\n    // }\n    // public setUsedFlag(usedFlag: string) {\n    //     this.usedFlag = usedFlag;\n    // }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/dto/interface/user-signup-request.dto.ts","import { Task } from \"../entity/task\";\n\n/**\n * ラベル別にタスクのリストを管理するデータクラス\n */\nexport class TaskLabelRelation {\n\n    /**\n     * タスクラベル名\n     */\n    public taskLabel: string;\n\n    /**\n     * タスク一覧\n     */\n    public tasks: Task[]\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/dto/task-label-relation.ts","/**\n * タスクラベルの汎用エンティティクラス。\n */\nexport class TaskLabel {\n\n    /**\n     * タスクラベルID\n     */\n    public labelId: string;\n\n    /**\n     * タスクラベル（名）\n     */\n    public taskLabel: string;\n\n    /**\n     * ラベル利用フラグ\n     */\n    public usedFlag: string;\n\n    /**\n     * 利用者ID\n     */\n    public userId: string;\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/entity/task-label.ts","/**\n * タスクモデルの汎用エンティティクラスです.\n */\nexport class Task {\n\n  /**\n   * タスクID\n   */\n  public taskId: string;\n  \n  /** \n   * タスクタイトル\n   */\n  public taskTitle: string;\n  \n  /** \n   * タスクラベル\n   */\n  public taskLabel: string;\n  \n  /** \n   * 開始日\n   */\n  public startDate: Date | string;\n  \n  /** \n   * 期限日\n   */\n  public deadline: Date | string;\n  \n  /** \n   * 完了フラグ \n   */\n  public completedFlag: string;\n  \n  /** \n   * 利用者ID \n   */\n  public userId: string;\n  \n  /** \n   * タスクメモ \n   */\n  public taskNote: string;\n\n  public getTaskId(): string {\n    return this.taskId;\n  }\n  public setTaskId(taskId: string) {\n    this.taskId = taskId;\n  }\n  public getTaskTitle(): string|null {\n    return this.taskTitle;\n  }\n  public setTaskTitle(taskTitle: string) {\n    this.taskTitle = taskTitle;\n  }\n  public getTaskLabel(): string {\n    return this.taskLabel;\n  }\n  public setTaskLabel(taskLabel: string) {\n    this.taskLabel = taskLabel;\n  }\n  public getStartDate(): Date | string {\n    return this.startDate;\n  }\n  public setStartDate(startDate: Date | string) {\n    this.startDate = startDate;\n  }\n  public getDeadline(): Date | string {\n    return this.deadline;\n  }\n  public setDeadline(deadline: Date | string) {\n    this.deadline = deadline;\n  }\n  public getCompletedFlag(): string {\n    return this.completedFlag;\n  }\n  public setCompletedFlag(completedFlag: string) {\n    this.completedFlag = completedFlag;\n  }\n  public getUserId(): string {\n    return this.userId;\n  }\n  public setUserId(userId: string) {\n    this.userId = userId;\n  }\n  public getTaskNote(): string {\n    return this.taskNote;\n  }\n  public setTaskNote(taskNote: string) {\n    this.taskNote = taskNote;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/entity/task.ts","import { ErrorObservable } from \"rxjs/observable/ErrorObservable\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { AppConst } from \"../const/app.const\";\n\n/**\n * サービスクラス共通エラーハンドラ\n */\nexport class GlobalErrorHandler {\n\n    /**\n     * エラーハンドリングを提供します。\n     * @param error: HttpErrorResponse\n     * @returns ErrorObservable\n     */\n    public static handleError(error: HttpErrorResponse): ErrorObservable {\n\n        if (error.error instanceof ErrorEvent) {\n          console.error(AppConst.GLOBAL_ERROR_MESSAGE + error.error.message + AppConst.STR_NEW_LINE);\n        } \n\n        console.error(AppConst.GLOBAL_ERROR_STATUS_CODE + error.status + AppConst.GLOBAL_ERROR_STATUS_MESSAGE + error.error + AppConst.STR_NEW_LINE);\n        \n        return Observable.throw(error.error.message);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/exception/global-error-handler.ts","module.exports = \"<!-- メインコンテンツ \\n  TODO: あとで別のコンポーネントを用意する\\n-->\\n<main>\\n    <div id=\\\"main-container\\\">\\n        <!-- メイン画像 -->\\n        <img class=\\\"top-image\\\" src=\\\"./assets/images/parallel-top.jpg\\\" alt=\\\"Parallel\\\">\\n        <!-- メインメッセージ -->\\n        <h1>着実な成果をあげるタスクの管理を</h1>\\n        <p>パラレルに進む仕事が見えるようになります。</p>\\n    </div>\\n    <div id=\\\"usage-container\\\">\\n        <!-- できることメッセージ -->\\n        <h2>“いつから”、”なにをすればよいのか”がわかります</h2>\\n        <!-- Youtube利用動画 -->\\n    </div>\\n</main>\\n\\n<!-- フッター -->\\n<footer>\\n    <div id=\\\"footer-container\\\">\\n        <p>Copylight 2019 Parallel</p>\\n    </div>\\n</footer>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/introduction/introduction/introduction.component.html\n// module id = ./src/app/introduction/introduction/introduction.component.html\n// module chunks = main","module.exports = \"@charset \\\"UTF-8\\\";\\n/* ----------------------\\n * メインコンテナ\\n ----------------------*/\\n/* Base */\\n#main-container {\\n  /* 相対配置 */\\n  position: relative; }\\n#main-container img {\\n    width: 100%;\\n    height: 500px;\\n    /* 指定の高さに入らない場合は切り取り */\\n    overflow: hidden; }\\n#main-container h1 {\\n    /* 絶対配置 */\\n    position: absolute;\\n    color: #fafafa;\\n    /* 中央寄せ */\\n    top: 50%;\\n    left: 50%;\\n    -webkit-transform: translate(-50%, -50%);\\n            transform: translate(-50%, -50%);\\n    font-size: 50px; }\\n#main-container p {\\n    /* 絶対配置 */\\n    position: absolute;\\n    color: #fafafa;\\n    /* 中央寄せ */\\n    top: 60%;\\n    left: 50%;\\n    -webkit-transform: translate(-60%, -50%);\\n            transform: translate(-60%, -50%);\\n    font-size: 30px; }\\n/* ----------------------\\n * 利用方法コンテナ\\n ----------------------*/\\n#usage-container {\\n  width: 100%;\\n  background-color: #fafafa;\\n  padding: 50px 0 0 0;\\n  margin: 0 auto;\\n  height: 300px; }\\n#usage-container h2 {\\n  font-size: 30px;\\n  text-align: center; }\\n/* ----------------------\\n * フッターコンテナ\\n ----------------------*/\\n#footer-container {\\n  background-color: #00b686;\\n  width: 100%;\\n  height: 50px; }\\n#footer-container p {\\n  text-align: center;\\n  font-size: 20px;\\n  padding: 15px;\\n  margin: 0 auto; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/introduction/introduction/introduction.component.scss\n// module id = ./src/app/introduction/introduction/introduction.component.scss\n// module chunks = main","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-introduction',\n  templateUrl: './introduction.component.html',\n  styleUrls: ['./introduction.component.scss']\n})\nexport class IntroductionComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/introduction/introduction/introduction.component.ts","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ServiceConst } from '../../const/service-const';\nimport { TaskComponent } from '../../component/task/task.component';\nimport { SignupComponent } from '../../component/user/signup/signup.component';\nimport { SigninComponent } from '../../component/user/signin/signin.component';\nimport { CommonModule } from '@angular/common';\nimport { TasklineComponent } from '../../component/taskline/taskline.component';\nimport { IntroductionComponent } from '../../introduction/introduction/introduction.component';\n\nconst routes: Routes = [ \n    { path: ServiceConst.URL_WEB_MAIN, component: IntroductionComponent },\n    { path: ServiceConst.URL_WEB_TASK, component: TaskComponent },\n    { path: ServiceConst.URL_WEB_USER_SIGNUP, component: SignupComponent},\n    { path: ServiceConst.URL_WEB_USER_SIGNIN, component: SigninComponent},\n    { path: ServiceConst.URL_WEB_TIMELINE, component: TasklineComponent }\n];\n\n@NgModule({\n  imports: [CommonModule, RouterModule.forChild(routes), RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class WebRoutingModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/routes/web/web-routing.module.ts","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { WebRoutingModule } from './web-routing.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    WebRoutingModule\n  ],\n  declarations: []\n})\nexport class WebModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/routes/web/web.module.ts","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { TaskLabel } from '../entity/task-label';\nimport { Task } from '../entity/task';\n\n/**\n * 共通データ授受サービス。ルートコンポーネントと機能コンポーネント間のデータ受け渡しをサポートします。\n */\n@Injectable()\nexport class CommonDeliveryService {\n\n    constructor() { }\n\n    /**\n     * コンポーネント共通利用者ID\n     * TODO: 絶対にnullに戻す TM00000001\n     */\n    private userId: BehaviorSubject<string> = new BehaviorSubject<string>(\"TM00000001\");\n\n    /**\n     * 利用者IDObservableオブジェクト\n     */\n    public observableUserId: Observable<string> = this.userId.asObservable();\n\n    /**\n     * 利用者IDの変更を随時反映します。\n     */\n    public emitUserIdChange(userId: string): void {\n        this.userId.next(userId);\n    }\n\n    /**\n     * 利用者IDをnullで初期化します。\n     */\n    public finalize(): void {\n        this.userId.next(null);\n    }\n\n    /**\n     * 利用者の所有するラベルの一覧\n     */\n    public userLabels: TaskLabel[];\n\n    /**\n     * 利用者の所有するタスクの一覧\n     */\n    public userTasks: Task[];\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/service/common-delivery.service.ts","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ServiceConst } from '../const/service-const';\nimport { catchError } from 'rxjs/operators';\nimport { GlobalErrorHandler } from '../exception/global-error-handler';\nimport { UserSigninResponseDto } from '../dto/interface/user-signin-response.dto';\nimport { UserSigninRequestDto } from '../dto/interface/user-signin-request.dto';\n\n/**\n * 利用者サインインサービスクラス。\n */\n@Injectable()\nexport class SigninService {\n\n    /**\n     * デフォルトコンストラクタ。\n     */\n    constructor(private http: HttpClient) { }\n\n    /**\n     * 新規利用者のサインインを実施します。\n     * @param userSigninRequestDto\n     * @returns Observable<UserSigninResponseDto>\n     */\n    public signin(userSigninRequestDto: UserSigninRequestDto): Observable<UserSigninResponseDto> {\n        // ヘッダー情報を設定します。\n        const options = {\n          headers : new HttpHeaders({\n              'Content-Type':  'application/json'\n            })\n        };\n\n        // POSTリクエストを実行します。\n        return this.http.post<UserSigninRequestDto>(ServiceConst.URL_USER_SIGNIN, userSigninRequestDto, options)\n            .pipe((res: Observable<UserSigninResponseDto>) => {\n                // セッションの保存\n                res.subscribe((res: UserSigninResponseDto) => localStorage.setItem('id', res.userId));\n                return res;\n            })\n            .pipe(catchError(GlobalErrorHandler.handleError));\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/service/signin.service.ts","import { Injectable } from '@angular/core';\nimport { CommonDeliveryService } from './common-delivery.service';\nimport { ObjectUtil } from '../util/object.util';\n\n/**\n * 利用者サインアウトサービスクラス。\n */\n@Injectable()\nexport class SignoutService {\n\n    constructor(private commonDeliveryService: CommonDeliveryService) { }\n\n    /**\n     * サインイン状態フラグ\n     */\n    private signedinFlag: boolean;\n\n    /**\n     * サインアウトを実施します。\n     */\n    public signout(): void {\n        if(this.isSignedin()) {\n            this.commonDeliveryService.finalize();\n        };\n    };\n\n    /**\n     * 認証状態をチェックします。\n     * @returns signedinFlag: boolean 認証フラグの状態\n     */\n    public isSignedin(): boolean {\n        this.commonDeliveryService.observableUserId.subscribe((userId: string) => {\n            if (ObjectUtil.isNullOrUndefined(userId)) {\n                this.signedinFlag = false;\n            } else {\n                this.signedinFlag = true;\n            }\n        });\n        return this.signedinFlag;\n    };\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/service/signout.service.ts","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ServiceConst } from '../const/service-const';\nimport { catchError } from 'rxjs/operators';\nimport { GlobalErrorHandler } from '../exception/global-error-handler';\nimport { UserSignupRequestDto } from '../dto/interface/user-signup-request.dto';\nimport { UserSignupResponseDto } from '../dto/interface/user-signup-response.dto';\n\n/**\n * 利用者サインアップServiceクラス。\n */\n@Injectable()\nexport class SignupService {\n\n    /**\n     * デフォルトコンストラクタ。\n     */\n    constructor(private http: HttpClient) { }\n\n    /**\n     * 新規利用者のサインアップを実施します。\n     * @param userSigninRequestDto\n     * @returns Observable<UserSignupResponseDto>\n     */\n    public signup(userSignupRequestDto: UserSignupRequestDto): Observable<UserSignupResponseDto> {\n        // ヘッダー情報を設定します。\n        const options = {\n          headers : new HttpHeaders({\n              'Content-Type':  'application/json'\n            })\n        };\n\n        // POSTリクエストを実行します。\n        return this.http.post<UserSignupRequestDto>(ServiceConst.URL_USER_REGIST, userSignupRequestDto, options)\n            .pipe(catchError(GlobalErrorHandler.handleError));\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/service/signup.service.ts","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { TaskLabelFetchResponseDto } from '../dto/interface/task-label-fetch-response.dto';\nimport { Observable } from 'rxjs';\nimport { ServiceConst } from '../const/service-const';\nimport { catchError } from 'rxjs/operators';\nimport { GlobalErrorHandler } from '../exception/global-error-handler';\nimport { TaskLabelRegisterRequestDto } from '../dto/interface/task-label-register-request.dto';\nimport { TaskLabelRegisterResponseDto } from '../dto/interface/task-label-register-response.dto';\n\n/**\n * タスクラベルをバックエンドとやりとりするServiceクラス。\n */\n@Injectable()\nexport class TaskLabelService {\n\n    /**\n     * デフォルトコンストラクタ。\n     */\n    constructor(private http: HttpClient) { }\n\n    /** \n     * タスクラベルの一覧を取得します。\n     */\n    public fetch(userId: string): Observable<TaskLabelFetchResponseDto> {\n      // APIをコールして、結果を取得します.\n      return this.http.get<TaskLabelFetchResponseDto>(\n          ServiceConst.URL_TASK_LABEL,\n          { params: {\n                userId: userId\n            }\n          })\n          .pipe(catchError(GlobalErrorHandler.handleError));\n    }\n\n    /** \n     * 新規タスクを登録するAPIをコールします.\n     * @param registTaskRequest: RegistTaskRequest\n     * @returns Observable<RegistTaskRequest>\n     */\n    public registerLabel(req: TaskLabelRegisterRequestDto): Observable<TaskLabelRegisterResponseDto> {\n      // HTTPリクエストのオプションをセットします.\n      const httpOptions = {\n          headers : new HttpHeaders({\n              'Content-Type':  'application/json'\n          })\n      };\n      // APIをコールします.\n      return this.http.post<TaskLabelRegisterRequestDto>(ServiceConst.URL_TASK_LABEL, req, httpOptions)\n          .pipe(catchError(GlobalErrorHandler.handleError));\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/service/task-label.service.ts","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport 'rxjs/add/operator/map';\n\nimport { ServiceConst } from '../const/service-const';\nimport { FetchTaskResponseDto } from '../dto/interface/fetch-task-response';\nimport { RegistTaskRequest } from '../dto/interface/regist-task-request';\nimport { GlobalErrorHandler } from '../exception/global-error-handler';\nimport { TaskCompleteRequestDto } from '../dto/interface/task-complete-request.dto';\nimport { TaskCompleteResponseDto } from '../dto/interface/task-complete-response.dto';\nimport { RegistTaskResponse } from '../dto/interface/regist-task-response';\n\n\n/**\n * タスクの処理を行うServiceクラスです.\n */\n@Injectable()\nexport class TaskService {\n\n  /** \n   * デフォルトコンストラクタ \n   */\n  constructor(private http: HttpClient) { }\n\n    /** \n     * タスクの一覧を取得するAPIをコールします.\n     */\n    public fetchTask(userId: string): Observable<FetchTaskResponseDto> {\n        // APIをコールして、結果を取得します.\n        return this.http.get<FetchTaskResponseDto>(\n            ServiceConst.URL_TASK_FETCH,\n            { params: {\n                userId: userId\n              }\n            })\n            .pipe(catchError(GlobalErrorHandler.handleError));\n    }\n\n    /** \n     * 新規タスクを登録するAPIをコールします.\n     * @param registTaskRequest: RegistTaskRequest\n     * @returns Observable<RegistTaskRequest>\n     */\n    public registTask(registTaskRequest: RegistTaskRequest): Observable<RegistTaskResponse> {\n        // HTTPリクエストのオプションをセットします.\n        const httpOptions = {\n            headers : new HttpHeaders({\n                'Content-Type':  'application/json'\n              })\n        };\n        // APIをコールします.\n        return this.http.post<RegistTaskRequest>(ServiceConst.URL_TASK_REGIST, registTaskRequest, httpOptions)\n            .pipe(catchError(GlobalErrorHandler.handleError));\n    }\n\n    /**\n     * タスクを完了します。\n     * @param taskCompleteRequestDto \n     * @returns Observable<TaskCompleteResponseDto>\n     */\n    public complete(taskCompleteRequestDto: TaskCompleteRequestDto): Observable<TaskCompleteResponseDto> {\n        // HTTPリクエストのヘッダー情報を設定します。\n        const options = {\n            headers : new HttpHeaders({\n              'Content-Type':  'application/json'\n            })\n        }\n\n        // APIをコールし、コンポーネントにObservableを返却します。\n        return this.http.patch<TaskCompleteRequestDto>(ServiceConst.URL_TASK_COMPLETE, taskCompleteRequestDto, options)\n            .pipe(catchError(GlobalErrorHandler.handleError));\n\n    }\n    \n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/service/task.service.ts","import { ObjectUtil } from \"./object.util\";\n\n/**\n * コレクション操作のユーティリティ\n */\nexport class CollectionUtil<T> {\n\n    /**\n     * コレクションがNullやUndefinedではない要素を一つ以上もつことを確認します。\n     * @param t コレクションオブジェクト\n     * @returns 結果、条件をみたさない場合falseを返却する\n     */\n    public static hasItems<T>(t: T[]): Boolean{\n        // null\n        if(ObjectUtil.isNullOrUndefined(t)) return false;\n\n        // サイズ0以下\n        if(Object.keys(t).length <= 0) return false;\n\n        return true;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/util/collection-util.ts","import { ObjectUtil } from \"./object.util\";\nimport { AppConst } from \"../const/app.const\";\n\n/**\n * 日付処理ユーティリティ。\n */\nexport class DateUtil {\n\n    /**\n     * 文字列を解析して日付フォーマットであることを確認します。\n     */\n    private static isDateFormat(operand: string | null): boolean {\n\n        // 変換できることを確認\n        if (Number.isNaN(Date.parse(operand))) {\n            return false;\n        }\n        return true;\n    };\n\n    /**\n     * ２つの日付を比較し、第一引数 > 第二引数の関係となっていることを確認します。\n     * @param subject 非検査対象\n     * @param comparison 非検査対象と比較する比較対象\n     */\n    public static isForwardFromComparison(subject: string, comparison: string): boolean{\n        // 比較する２つの引数が日付フォーマットに変換できない場合はfalse\n        if(!this.isDateFormat(subject) || !this.isDateFormat(comparison)){\n            return false;\n        }\n\n        var subjectTime: number = Date.parse(subject);\n        var comparisonTime: number = Date.parse(comparison);\n\n        //  日付の比較\n        if(subjectTime > comparisonTime){\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 引数の日付からYYYY/MM/DD形式に変換します。\n     * @param operand オペランド\n     * @returns YYYY/MM/DD形式の日付文字列\n     */\n    public static formatDateYMDWithSlash(operand: Date | null): string {\n        if(!ObjectUtil.isNullOrUndefined(operand)){\n            return AppConst.BLANK;\n        }\n\n        let year = operand.getFullYear();\n        let month = operand.getMonth() + 1;\n        let date = operand.getDate();\n\n        console.log(year + AppConst.SLASH + month + AppConst.SLASH + date);\n\n        return year + AppConst.SLASH + month + AppConst.SLASH + date;\n\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/util/date-util.ts","import { _ } from 'underscore';\n\n/**\n * オブジェクト操作のユーティリティを提供します。\n */\nexport class ObjectUtil {\n\n    /**\n     * オブジェクトがnullもしくはundefinedであることを判定します。デフォルトはfalse。\n     * @param t: any\n     * @returns boolean\n     */\n    public static isNullOrUndefined(t: any): boolean {\n        if(t == null){\n            return true;\n        }\n        if(typeof t == undefined || t === \"undefined\"){\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * 指定されたリストから、検索条件を指定して一件削除します。\n     * @param array, 削除する元ネタのリスト\n     * @param key, 削除するオブジェクトのプロパティ\n     * @param condition, 削除するオブジェクトの条件\n     */\n    public static deleteItem<T>(array: T[], key: any, condition: string | number): void{\n        var object = {\n            key : condition\n        };\n\n        // 削除対象の抽出\n        var operand: T = _.where(array, object);\n        // 削除対象の索引を取得\n        var operandIndex: number = _.indexOf(array, operand);\n        // 削除\n        array.splice(operandIndex, 1);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/util/object.util.ts","/**\n * 文字列操作ユーティリティクラス。\n */\nexport class StringUtil {\n\n    /**\n     * 正規表現、メールアドレス形式\n     */\n    public static REGEX_FORMAT_EMAIL: RegExp = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n\n    /**\n     * 正規表現、半角英数字\n     */\n    public static REGEX_FORMAT_HALF_SIZE: RegExp = /^[a-zA-Z0-9]*$/;\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/util/string-util.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts"],"sourceRoot":"webpack:///"}